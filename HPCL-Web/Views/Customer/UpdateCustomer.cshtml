@model HPCL.Common.Models.CustomerModel


<div class="col-lg-12">
    <div class="bg-white p-2 p-md-4">
        <h5>Customer Update</h5>
        <ul class="nav nav-tabs mt-2 form_tabs" id="formTab" role="tablist">
            <li class="nav-item"> <a class="nav-link active" id="basicInfo-tab" data-toggle="tab" href="#basicInfo" role="tab" aria-controls="basicInfo" aria-selected="true">Basic Information</a> </li>
            <li class="nav-item"> <a class="nav-link disable" id="address-tab" data-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="false">Address</a> </li>
            <li class="nav-item"> <a class="nav-link disable" id="officialDetails-tab" data-toggle="tab" href="#officialDetails" role="tab" aria-controls="officialDetails" aria-selected="false">Key Official Details</a> </li>
        </ul>
        <form name="applicationForm" method="post" asp-action="UpdateCustomer" class="w-100">
            @*@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "form1" }))
                {*@
            <div class="tab-content mt-3" id="myTabContent">
                <div class="tab-pane fade show active" id="basicInfo" role="tabpanel" aria-labelledby="basicInfo-tab">
                    <div class="w-100">
                        <div class="col-lg-6 col-md-12 col-12 pl-0 pr-md-2 pr-0 py-2">
                            <div class="border-1 rounded border-grey">
                                <p class="text_primary px-3 py-2 bg-grey m-0 font-weight-bold">Application Details</p>
                                <div class="alert alert-danger alert-cust-success" id="dvRemarks" style="@(Model.Remarks=="" ? "display:none":"display:block")">
                                    @Html.DisplayFor(m => m.Remarks)
                                </div>
                                <div class="py-4 pr-4 pl-0 px-md-4">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Form No. <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            @Html.TextBoxFor(m => m.FormNumber, new { placeholder = "Form Number", @class = "form-control", maxlength = "10", onkeypress = "return isNumberKey(event)", autocomplete = "off", @readonly = "readonly" })
                                            <span class="error" id="formNumber_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Customer Type <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.CustomerTypeID, new SelectList(Model.CustomerTypeMdl, "CustomerTypeID", "CustomerTypeName"), new { @class = "form-control", disabled = "true" })

                                            </div>
                                            <span class="error" id="customerType_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Customer Sub Type <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.CustomerSubTypeID, new SelectList(Model.CustomerSubTypeMdl, "CustomerSubTypeID", "CustomerSubTypeName"), new { @class = "form-control", disabled = "true" })
                                            </div>
                                            <span class="error" id="customerSubType_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Date of Application <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            @Html.TextBoxFor(m => m.CustomerDateOfApplication, new { @class = "form-control", autocomplete = "off" })  @*@type = "date"*@
                                            <span class="error" id="applicationDate_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Zonal Office <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.CustomerZonalOfficeID, new SelectList(Model.CustomerZonalOfficeMdl, "ZonalOfficeID", "ZonalOfficeName"), new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="zonalOffice_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Regional Office <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.CustomerRegionID, new SelectList(Model.CustomerRegionMdl, "RegionalOfficeID", "RegionalOfficeName"), new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="regionalOffice_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Sales Area <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            @Html.DropDownListFor(m => m.CustomerSalesAreaID, new SelectList(Model.SalesAreaMdl, "SalesAreaID", "SalesAreaName"), new { @class = "form-control" })
                                            <span class="error" id="salesArea_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Type Of Customer <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(x => x.TypeOfCustomerID, new[]{
                                                   new SelectListItem(){ Text = "Select Customer Type", Value = "0"},
                                                   new SelectListItem(){ Text = "Competitor Customer", Value = "1"},
                                                   new SelectListItem(){ Text = "Existing HPCL Customer", Value = "2"},
                                                   new SelectListItem(){ Text = "New Customer", Value = "3"},
                                                   }, null, new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="typeOfCustomer_error"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-12 col-12 pr-0 pl-md-2 pl-0 py-2">
                            <div class="border-1 rounded border-grey h-100">
                                <p class="text_primary px-3 py-2 bg-grey m-0 font-weight-bold">Personal Details</p>
                                <div class="py-4 pr-4 pl-0 px-md-4">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Individual/Org. Name <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            <div class="row">
                                                <div class="col-4">
                                                    <div class="custom_select">
                                                        @Html.DropDownListFor(x => x.IndividualOrgNameTitle, new[]{
                                                           new SelectListItem(){ Text = "Title", Value = "-1" },
                                                           new SelectListItem(){ Text = "Mr", Value = "Mr"},
                                                           new SelectListItem(){ Text = "Ms", Value = "Ms"},
                                                           new SelectListItem(){ Text = "M/s", Value = "M/s"},
                                                           }, null, new { @class = "form-control px-0" })
                                                    </div>
                                                    @*<span class="error" id="salutaion_error"></span>*@
                                                </div>
                                                <div class="col-8 pl-0">
                                                    @Html.TextBoxFor(m => m.IndividualOrgName, new { placeholder = "IndividualOrgName", @class = "form-control", autocomplete = "off", maxlength = "80" })
                                                    <span class="error" id="individualName_error"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Name on Card <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            @Html.TextBoxFor(m => m.CustomerNameOnCard, new { placeholder = "Name on Card", @class = "form-control", autocomplete = "off", maxlength = "22" })
                                            <span class="error" id="nameOnCard_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Type of Business Entity <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.CustomerTbentityID, new SelectList(Model.CustomerTbentityMdl, "TBEntityID", "TBEntityName"), new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="typeOfbusiness_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Residence Status<sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(x => x.CustomerResidenceStatus, new[]{
                                                    new SelectListItem(){ Text = "Select Residence Status", Value = "-1"},
                                                    new SelectListItem(){ Text = "Indian", Value = "Indian"},
                                                    new SelectListItem(){ Text = "NRI", Value = "NRI"},
                                                    }, null, new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="residenceStatus_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12" id="lblPanText">Income Tax PAN<sup class="text-danger">*</sup></label>
                                        <div class="col-md-6 col-12">
                                            @Html.TextBoxFor(m => m.CustomerIncomeTaxPan, new { @class = "form-control", @style = "text-transform:uppercase", autocomplete = "off" })

                                            <span class="error" id="incomeTaxPan_error"></span>
                                        </div>
                                        <div class="col-md-2 col-12 pl-md-0">
                                            <button class="btn btn_primary" type="button" id="btnVerify" onclick="ValidatePAN()">Verify</button>
                                        </div>
                                    </div>

                                    <div class="form-group align-items-center flex-wrap" id="lblCustPOI">
                                        <label>** Please provide the document details that you are going to upload as POI</label>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-4 col-12">Tier Of Customer <sup class="text-danger">*</sup></label>
                                        <div class="col-md-8 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(x => x.TierOfCustomerID, new[]{
                                                  new SelectListItem(){ Text = "Select Tier Of Customer", Value = "0"},
                                                  new SelectListItem(){ Text = "1", Value = "1"},
                                                  new SelectListItem(){ Text = "2", Value = "2"},
                                                  new SelectListItem(){ Text = "3", Value = "3"},
                                                  }, null, new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="tierOfCustomer_error"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="clearfix"></div>
                        <div class="d-flex align-items-center justify-content-center mt-3">
                            <div class="px-2">
                                <button class="btn btn_primary" type="button" onclick="return showregAddress()">Next</button>
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>
                <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
                    <div class="border-1 rounded border-grey h-100">
                        <p class="text_primary px-3 py-2 bg-grey m-0 font-weight-bold">Communication Address</p>
                        <div class="py-2 p-md-4">
                            <div class="d-flex align-items-center justify-content-between flex-wrap row">
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Address 1<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.CommunicationAddress1, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                            <span class="error" id="comm_address1_error"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Address 2<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.CommunicationAddress2, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                            <span class="error" id="comm_address2_error"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Address 3</label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.CommunicationAddress3, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Location</label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.CommunicationLocation, new { @class = "form-control", autocomplete = "off", maxlength = "20" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">City<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.CommunicationCity, new { @class = "form-control", autocomplete = "off", maxlength = "20" })
                                            <span class="error" id="comm_city_error"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Pin code<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.CommunicationPinCode, new { @class = "form-control", maxlength = "6", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                            <span class="error" id="comm_pincode_error"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">State<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.CommunicationStateID, new SelectList(Model.CustomerStateMdl, "StateID", "StateName"), new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="comm_states_error"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">District<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.CommunicationDistrictId, new SelectList(Model.CommunicationDistrictMdl, "districtID", "districtName"), new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="comm_district_error"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Phone (Office) </label>@*<sup class="text-danger">*</sup>*@
                                        <div class="col-md-7 col-12">
                                            <div class="row">
                                                <div class="col-4">
                                                    @Html.TextBoxFor(m => m.CommunicationDialCode, new { @class = "form-control", maxlength = "4", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <span class="error" id="CommunicationDialCode_error"></span>
                                                </div>
                                                <div class="col-8 pl-0">
                                                    @Html.TextBoxFor(m => m.CommunicationPhoneNo, new { @class = "form-control", maxlength = "8", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <span class="error" id="comm_officePhone_error"></span>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Fax</label>
                                        <div class="col-md-7 col-12">
                                            <div class="row">
                                                <div class="col-4">
                                                    @Html.TextBoxFor(m => m.CommunicationFaxCode, new { @class = "form-control", maxlength = "4", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <span class="error" id="CommunicationFaxCode_error"></span>
                                                </div>
                                                <div class="col-8 pl-0">
                                                    @Html.TextBoxFor(m => m.CommunicationFax, new { @class = "form-control", maxlength = "8", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <span class="error" id="CommunicationFax_error"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Mobile<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.CommunicationMobileNumber, new { @class = "form-control", maxlength = "10", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                            <div class="error" id="comm_mobileNumber_error"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Email<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.CommunicationEmail, new { @class = "form-control", @style = "text-transform:lowercase", autocomplete = "off", maxlength = "50" })
                                            <div class="error" id="comm_email_error"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="border-1 rounded border-grey h-100 mt-3">
                        <p class="text_primary px-3 py-2 bg-grey m-0 font-weight-bold">Permanent/Registered Office Address</p>
                        <div class="py-2 p-md-4">
                            <label class="d-flex align-items-center justify-content-start px-3">
                                <input type="checkbox" name="sameAddressCheck" id="sameAddressCheck" class="mr-2" onclick="sameAddressAsCommunication()">
                                <p class="m-0">Same as Communication Address</p>
                            </label>
                            <div class="row w-100" id="permanent_add">
                                <div class="d-flex align-items-center justify-content-between flex-wrap">
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-1 col-md-3 col-12">Address 1<sup class="text-danger">*</sup></label>
                                            <div class="col-md-7 col-12">
                                                @Html.TextBoxFor(m => m.PerOrRegAddress1, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                                <div class="error" id="perma_address1_error"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-2 col-md-3 col-12">Address 2<sup class="text-danger">*</sup></label>
                                            <div class="col-md-7 col-12">
                                                @Html.TextBoxFor(m => m.PerOrRegAddress2, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                                <div class="error" id="perma_address2_error"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-1 col-md-3 col-12">Address 3</label>
                                            <div class="col-md-7 col-12">
                                                @Html.TextBoxFor(m => m.PerOrRegAddress3, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-2 col-md-3 col-12">Location</label>
                                            <div class="col-md-7 col-12">
                                                @Html.TextBoxFor(m => m.PerOrRegAddressLocation, new { @class = "form-control", autocomplete = "off", maxlength = "20" })
                                                <span class="error" id="perma_location_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-1 col-md-3 col-12">City<sup class="text-danger">*</sup></label>
                                            <div class="col-md-7 col-12">
                                                @Html.TextBoxFor(m => m.PerOrRegAddressCity, new { @class = "form-control", autocomplete = "off", maxlength = "20" })
                                                <span class="error" id="perma_city_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-2 col-md-3 col-12">Pin code<sup class="text-danger">*</sup></label>
                                            <div class="col-md-7 col-12">
                                                @Html.TextBoxFor(m => m.PerOrRegAddressPinCode, new { @class = "form-control", maxlength = "6", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                <span class="error" id="perma_pincode_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-1 col-md-3 col-12">State<sup class="text-danger">*</sup></label>
                                            <div class="col-md-7 col-12">
                                                <div class="custom_select">
                                                    @Html.DropDownListFor(m => m.PerOrRegAddressStateID, new SelectList(Model.CustomerStateMdl, "StateID", "StateName"), new { @class = "form-control" })
                                                </div>
                                                <span class="error" id="perma_state_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-2 col-md-3 col-12">District<sup class="text-danger">*</sup></label>
                                            <div class="col-md-7 col-12">
                                                <div class="custom_select">
                                                    @Html.DropDownListFor(m => m.PermanentDistrictId, new SelectList(Model.PerOrRegAddressDistrictMdl, "districtID", "districtName"), new { @class = "form-control" })
                                                </div>
                                                <span class="error" id="perma_district_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-1 col-md-3 col-12">Phone (Home) </label> @*<sup class="text-danger">*</sup>*@
                                            <div class="col-md-7 col-12">
                                                <div class="row">
                                                    <div class="col-4">
                                                        @Html.TextBoxFor(m => m.PerOrRegAddressDialCode, new { @class = "form-control", maxlength = "4", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                        <span class="error" id="PerOrRegAddressDialCode_error"></span>
                                                    </div>
                                                    <div class="col-8 pl-0">
                                                        @Html.TextBoxFor(m => m.PerOrRegAddressPhoneNumber, new { @class = "form-control", maxlength = "8", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                        <span class="error" id="perma_officePhone_error"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal offset-md-2 col-md-3 col-12">Fax</label>
                                            <div class="col-md-7 col-12">
                                                <div class="row">
                                                    <div class="col-4">
                                                        @Html.TextBoxFor(m => m.PermanentFaxCode, new { @class = "form-control", maxlength = "4", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                        <span class="error" id="PermanentFaxCode_error"></span>
                                                    </div>
                                                    <div class="col-8 pl-0">
                                                        @Html.TextBoxFor(m => m.PermanentFax, new { @class = "form-control", maxlength = "8", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                        <span class="error" id="perma_faxNumber_error"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <div class="d-flex align-items-center justify-content-center mt-3">
                        <div class="px-2">
                            <button class="btn btn_primary px-4 py-2" type="button" onclick="showBasicInfo()">Previous</button>
                        </div>
                        <div class="px-2">
                            <button class="btn btn_primary px-4 py-2" type="button" onclick="return showOfficialDetails()">Next</button>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="officialDetails" role="tabpanel" aria-labelledby="officialDetails-tab">
                    <div class="border-1 rounded border-grey w-100">
                        <p class="text_primary px-3 py-2 bg-grey m-0 font-weight-bold">Key Official</p>
                        <div class="py-2 p-md-4">
                            <div class="d-flex align-items-start justify-content-between flex-wrap row">
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Individual Initials </label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.KeyOffIndividualInitials, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                            @*<input type="text" class="form-control">*@
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Middle Name </label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.KeyOffMiddleName, new { @class = "form-control", autocomplete = "off", maxlength = "30" })
                                            <span class="error" id="KeyOffMiddleName_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Date of Birth</label>
                                        <div class="col-md-7 col-12">
                                            @*<input type="date" class="form-control">*@
                                            @Html.TextBoxFor(m => m.KeyOfficialDOB, new { @id = "KeyOfficialDOB", @class = "form-control", autocomplete = "off" })
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Email</label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.KeyOffEmail, new { @class = "form-control", autocomplete = "off", @style = "text-transform:lowercase", maxlength = "50" })
                                            <span class="error" id="KeyOffEmail_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Designation <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.KeyOffDesignation, new { @class = "form-control", autocomplete = "off", maxlength = "30" })
                                            <span class="error" id="official_designation_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Fax</label>
                                        <div class="col-md-7 col-12">
                                            <div class="row">
                                                <div class="col-4">
                                                    @Html.TextBoxFor(m => m.KeyOffFaxCode, new { @class = "form-control", maxlength = "4", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <span class="error" id="KeyOffFaxCode_error"></span>
                                                </div>
                                                <div class="col-8 pl-0">
                                                    @Html.TextBoxFor(m => m.KeyOffFax, new { @class = "form-control", maxlength = "8", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <span class="error" id="KeyOffFax_error"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">First Name <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="row">
                                                <div class="col-4">
                                                    <div class="custom_select">
                                                        @Html.DropDownListFor(x => x.KeyOffTitle, new[]{
                                                          new SelectListItem(){ Text = "Title", Value = "-1"},
                                                          new SelectListItem(){ Text = "Mr", Value = "Mr"},
                                                          new SelectListItem(){ Text = "Ms", Value = "Ms"},
                                                          new SelectListItem(){ Text = "M/s", Value = "M/s"},
                                                          }, null, new { @class = "form-control px-0" })
                                                    </div>
                                                </div>
                                                <div class="col-md-8 col-12">
                                                    @Html.TextBoxFor(m => m.KeyOffFirstName, new { @class = "form-control", autocomplete = "off", maxlength = "30" })
                                                    <span class="error" id="official_fName_error"></span>
                                                </div>
                                            </div>
                                            @*<span class="error" id="officialTitle_error"></span>*@
                                        </div>
                                    </div>

                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Last Name</label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.KeyOffLastName, new { @class = "form-control", autocomplete = "off", maxlength = "30" })
                                            <span class="error" id="KeyOffLastName_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12 px-0">Date of Anniversary</label>
                                        <div class="col-md-7 col-12">
                                            @*<input type="date" class="form-control">*@
                                            @Html.TextBoxFor(m => m.KeyOffDateOfAnniversary, new { @id = "KeyOffDateOfAnniversary", @class = "form-control", autocomplete = "off" })
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Mobile <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.KeyOffMobileNumber, new { @class = "form-control", maxlength = "10", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                            <span class="error" id="official_mobile_error"></span>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal offset-md-1 col-md-3 col-12">Phone (Office)</label>
                                        <div class="col-md-7 col-12">
                                            <div class="row">
                                                <div class="col-4">
                                                    @Html.TextBoxFor(m => m.KeyOffPhoneCode, new { @class = "form-control", maxlength = "4", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <span class="error" id="KeyOffPhoneCode_error"></span>
                                                </div>
                                                <div class="col-8 pl-0">
                                                    @Html.TextBoxFor(m => m.KeyOffPhoneNumber, new { @class = "form-control", maxlength = "8", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <span class="error" id="KeyOffPhoneNumber_error"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    </div>
                    <div class="border-1 rounded border-grey w-100 mt-3">
                        <p class="text_primary px-3 py-2 bg-grey m-0 font-weight-bold">Other Details</p>
                        <div class="py-2 p-md-4">
                            <div class="d-flex align-items-center justify-content-between flex-wrap row">
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-5 col-12">Secret Question</label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.KeyOfficialSecretQuestion, new SelectList(Model.CustomerSecretQueMdl, "SecretQuestionId", "SecretQuestionName"), new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-5 col-12">Secret Answer</label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.KeyOfficialSecretAnswer, new { @class = "form-control", autocomplete = "off" })
                                            @* <input type="text" class="form-control">*@
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-5 col-12">Area of Operation</label>
                                        <div class="col-md-7 col-12">
                                            <div class="d-flex align-items-center justify-content-between flex-wrap">
                                                <label class="d-flex align-items-center justify-content-between">
                                                    @*<input type="checkbox" class="mr-2">*@
                                                    @Html.CheckBoxFor(m => m.InterState, new { id = "hdnInterState" })
                                                    <p class="m-0 ml-2">Inter State</p>
                                                </label>
                                                <label class="d-flex align-items-center justify-content-between">
                                                    @*<input type="checkbox" class="mr-2">*@
                                                    @Html.CheckBoxFor(m => m.InterCity, new { id = "hdnInterCity" })
                                                    <p class="m-0 ml-2">Inter City</p>
                                                </label>
                                                <label class="d-flex align-items-center justify-content-between">
                                                    @*<input type="checkbox" class="mr-2">*@
                                                    @Html.CheckBoxFor(m => m.IntraCity, new { id = "hdnIntraCity" })
                                                    <p class="m-0 ml-2">Intra City</p>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-5 col-12">Fleet Size (No of Vehicles Owned)</label>
                                        <div class="col-md-7 col-12">
                                            <div class="d-flex align-items-center justify-content-between flex-wrap">
                                                <div class="mb-2 mb-sm-2 px-2 col-sm-6 col-md-3">
                                                    <span class="d-flex font-12">HCV</span>
                                                    @Html.TextBoxFor(m => m.FleetSizeNoOfVechileOwnedHCV, new { @class = "w-100 form-control" })
                                                    @* <input type="text" class="w-100">*@
                                                </div>
                                                <div class="mb-2 mb-sm-2 px-2 col-sm-6 col-md-3">
                                                    <span class="d-flex font-12">LCV</span>
                                                    @Html.TextBoxFor(m => m.FleetSizeNoOfVechileOwnedLCV, new { @class = "w-100 form-control" })
                                                    @*<input type="text" class="w-100">*@
                                                </div>
                                                <div class="mb-2 mb-sm-2 px-2 col-sm-6 col-md-3">
                                                    <span class="d-flex font-12">MUV/SUV</span>
                                                    @Html.TextBoxFor(m => m.FleetSizeNoOfVechileOwnedMUVSUV, new { @class = "w-100 form-control" })
                                                    @*<input type="text" class="w-100">*@
                                                </div>
                                                <div class="mb-2 mb-sm-2 px-2 col-sm-6 col-md-3">
                                                    <span class="d-flex font-12">Car/Jeep</span>
                                                    @Html.TextBoxFor(m => m.FleetSizeNoOfVechileOwnedCarJeep, new { @class = "w-100 form-control" })
                                                    @*<input type="text" class="w-100">*@
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-5 col-12">Type of Fleet</label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.CustomerTypeOfFleetID, new SelectList(Model.CustomerTypeOfFleetMdl, "TypeOfFleetId", "TypeOfFleetName"), new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-5 col-12">Card applied for</label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.KeyOfficialCardAppliedFor, new { @class = "form-control", autocomplete = "off" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-5 col-12">Approx Monthly Spends on Vehicles</label>
                                        <div class="col-md-7 col-12">
                                            <div class="row">
                                                <div class="col-12 col-sm-8">
                                                    <div class="py-2">
                                                        <div class=" position-relative pr-4">
                                                            @Html.TextBoxFor(m => m.KeyOfficialApproxMonthlySpendsonVechile1, new { @class = "form-control" })
                                                            <a href="#" class="form_info" title="Fuel in Rs.">?</a>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-12 col-sm-4">
                                                    <div class=" py-2">
                                                        <div class=" position-relative pr-4">
                                                            @Html.TextBoxFor(m => m.KeyOfficialApproxMonthlySpendsonVechile2, new { @class = "form-control" })
                                                            <a href="#" class="form_info" title="Lube in Rs.">?</a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-12 col-12">
                                    <div class="form-group d-flex align-items-center flex-wrap">
                                        <label class="font-weight-normal col-md-5 col-12" id="lblPanCardRemarks" style="display:none;">Pan Card Remarks</label>
                                        <div class="col-md-7 col-12">
                                            @Html.TextBoxFor(m => m.PanCardRemarks, new { @class = "form-control", autocomplete = "off", maxlength = "50", @readonly = "readonly", style = "display:none;" })
                                            <span class="error" id="PanCardRemarks_error"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <div class="d-flex align-items-center justify-content-center mt-3">
                        <div class="px-2">
                            <button class="btn btn_primary px-4 py-2" type="button" onclick="showregAddressInfo()">Previous</button>
                        </div>
                        <div class="px-2">
                            @*<button class="btn btn_primary px-4 py-2" type="button" onclick="return showCardDetails()">Next</button>*@
                            <button class="btn btn_primary px-4 py-2" id="btnAdd" type="submit" onclick="return showCardDetails()">Save</button>
                        </div>
                    </div>
                </div>

                <div style="display:none;">@Html.CheckBoxFor(m => m.IsSameAsCommAddress, new { id = "hdnSameAsCommAddress" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddress1, new { id = "hdnPerOrRegAddress1" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddress2, new { id = "hdnPerOrRegAddress2" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddress3, new { id = "hdnPerOrRegAddress3" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddressLocation, new { id = "hdnPerOrRegAddressLocation" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddressCity, new { id = "hdnPerOrRegAddressCity" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddressPinCode, new { id = "hdnPerOrRegAddressPinCode" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddressStateID, new { id = "hdnPerOrRegAddressStateID" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddressDistrict, new { id = "hdnPerOrRegAddressDistrict" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddressDialCode, new { id = "hdnPerOrRegAddressDialCode" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddressPhoneNumber, new { id = "hdnPerOrRegAddressPhoneNumber" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PermanentFaxCode, new { id = "hdnPermanentFaxCode" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PermanentFax, new { id = "hdnPermanentFax" })</div>
                <div style="display:none;">@Html.TextBoxFor(m => m.PerOrRegAddressDialCode, new { id = "hdnPerOrRegAddressDialCode" })</div>
                @Html.HiddenFor(model => Model.IsDuplicatePanNo)
                @Html.HiddenFor(model => Model.AllowPanDuplication)
                @Html.HiddenFor(model => Model.CustomerReferenceNo)
            </div>

            <!-- Modal : Dialog -->
            <!-- PAN Validation Modal -->
            <div class="modal fade" id="panvalidation" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header py-2">
                            <h5 class="modal-title" id="exampleModalLabel" style="font-size:18px;">PAN Validation</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="col-lg-12 col-12">
                                <div class="d-flex align-items-center justify-content-center flex-wrap mb-0">
                                    <p class="mb-0">Entered PAN is already existing in DT Plus system. Still you want to proceed?</p>
                                </div>
                            </div>
                            <div class="d-flex align-items-center justify-content-center mt-3">
                                <div class="px-2">
                                    <button class="btn btn_primary" type="button" onclick="GetClientConfirmation(this)">OK</button>
                                </div>
                                <div class="px-2">
                                    <button class="btn btn_primary" type="button" onclick="GetClientConfirmation(this)">CANCEL</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Modal : Dialog -->
        </form>


    </div>
</div>
<script type="text/javascript">
    var custDateOfApplication = $("#CustomerDateOfApplication").val();
    var OfficialDOB = $("#KeyOfficialDOB").val();
    var OffDateOfAnniversary = $("#KeyOffDateOfAnniversary").val();
    var notFoundError = "@ViewBag.NotFoundError";

    $(document).ready(function () {

        var customerTbentityID = $('#CustomerTbentityID').val();
        console.log(customerTbentityID);
        if (customerTbentityID == "10") {
            $('#lblCustPOI').show();
        }
        else {
            $('#lblCustPOI').hide();
        }

        localStorage.setItem("PANNOALREADYUSED", "1");
        localStorage.setItem("FORMNOALREADYUSED", "1");
        localStorage.setItem("MOBILENUMBERREADYUSED", "1");
        localStorage.setItem("EMAILIDALREADYUSED", "1");
        localStorage.setItem("DUPLICATEPANUSED", "1");

        if (notFoundError == "") {
            if (custDateOfApplication == "") {
                $("#CustomerDateOfApplication").datepicker({
                    "setDate": new Date(),
                    "autoclose": true,
                    dateFormat: 'dd-mm-yy'
                });
                setDates();
            }
            else {
                $("#CustomerDateOfApplication").datepicker({ dateFormat: 'dd-mm-yy' });
            }

            if (OfficialDOB == "") {
                $("#KeyOfficialDOB").datepicker({
                    "setDate": new Date(),
                    "autoclose": true,
                    dateFormat: 'dd-mm-yy'
                });
                //setDates();
            }
            else {
                $("#KeyOfficialDOB").datepicker({ dateFormat: 'dd-mm-yy' });
            }

            if (OffDateOfAnniversary == "") {
                $("#KeyOffDateOfAnniversary").datepicker({
                    "setDate": new Date(),
                    "autoclose": true,
                    dateFormat: 'dd-mm-yy'
                });
                //setDates();
            }
            else {
                $("#KeyOffDateOfAnniversary").datepicker({ dateFormat: 'dd-mm-yy' });
            }
        }

        $("#CustomerIncomeTaxPan").focus();
        
    });

    function setDates() {
        var d = new Date();

        var month = d.getMonth() + 1;
        var day = d.getDate();
        var output = (day < 10 ? '0' : '') + day + '-' +
            (month < 10 ? '0' : '') + month + '-' +
            d.getFullYear();

        $("#CustomerDateOfApplication").val(output);
        //$("#KeyOfficialDOB").val(output);

    };

    $("#btnAdd").click(function () {
        let flag = 'Y';
        debugger;
        if (document.getElementById("sameAddressCheck").checked == true) {
            //$('#hdnPermAddress1').checked = true;
            /*$('#hdnPermAddress1').val($('#CommunicationAddress1').val());*/
            $('#hdnPerOrRegAddress1').val($('#CommunicationAddress1').val());
            $('#PerOrRegAddress1').val($('#CommunicationAddress1').val());
            $('#hdnPerOrRegAddress2').val($('#CommunicationAddress2').val());
            $('#hdnPerOrRegAddress3').val($('#CommunicationAddress3').val());
            $('#hdnPerOrRegAddressLocation').val($('#CommunicationLocation').val());
            $('#hdnPerOrRegAddressCity').val($('#CommunicationCity').val());
            $('#hdnPerOrRegAddressStateID').val($('#CommunicationStateID').val());
            $('#hdnPerOrRegAddressPinCode').val($('#CommunicationPinCode').val());
            $('#hdnPerOrRegAddressDialCode').val($('#CommunicationDialCode').val());
            $('#hdnPerOrRegAddressPhoneNumber').val($('#CommunicationPhoneNo').val());
            $('#hdnPermanentFax').val($('#CommunicationFax').val());
            $('#hdnPerOrRegAddressDialCode').val($('#CommunicationDialCode').val());
            $('#hdnPermanentFaxCode').val($('#CommunicationFaxCode').val());

        }

        if (flag == 'N') {
            $("#applicationForm").submit(function (e) {
                e.preventDefault();
            });
        }
    });

    // on customer selection Change
    $("#CustomerTypeID").change(function () {
        var id = this.value;
        if (id != 0) {
            $("#customerSubType_error").html("");
        }

        if (id == 918) {//OTC Customer
             window.location.href = '@Url.Action("CustomerCardCreation", "MyHpOTCCardCustomer")';
        }

        $.ajax({
            type: 'POST',  // http method
            url: '@Url.Action("GetCustomerSubType", "Customer")',
            data: { CustomerTypeID: id },  // data to submit
            dataType: "json",
            success: function (data, status, xhr) {
                var v = data;
                if (status == 'success') {
                    $("#CustomerSubTypeID").html("");
                    $.each(data, function (i, data) { // bind the dropdown list using json result
                        $('<option>',
                            {
                                value: data.customerSubTypeID,
                                text: data.customerSubTypeName
                            }).html(data.customerSubTypeName).appendTo("#CustomerSubTypeID");
                    });

                }
                else {
                    console.log(v);
                }
            },
            error: function (jqXhr, textStatus, errorMessage) {
                alert("Error Populating Customer Sub Type");
            }
        });
    });

     // on Zone  selection Change
    $("#CustomerZonalOfficeID").change(function () {
        var id = this.value;
            if (id != 0) {
                $("#regionalOffice_error").html("");
            }
            $.ajax({
                type: 'POST',  // http method
                url: '@Url.Action("GetRegionalDetails", "Customer")',
                data: { ZonalOfficeID: id },  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    var v = data;
                    if (status == 'success') {
                        $("#CustomerRegionID").html("");
                        $.each(data, function (i, data) { // bind the dropdown list using json result
                            $('<option>',
                                {
                                    value: data.regionalOfficeID,
                                    text: data.regionalOfficeName
                                }).html(data.regionalOfficeName).appendTo("#CustomerRegionID");
                        });

                    }
                    else {
                        console.log(v);
                    }
                },
                error: function (jqXhr, textStatus, errorMessage) {
                    alert("Error Populating Customer Region");
                }
            });
    });

     // on Region selection Change
    $("#CustomerRegionID").change(function () {
        var id = this.value;
            if (id != 0) {
                $("#regionalOffice_error").html("");
            }
            $.ajax({
                type: 'POST',  // http method
                url: '@Url.Action("GetsalesAreaDetails", "Customer")',
                data: { RegionID: id },  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    var v = data;
                    if (status == 'success') {
                        $("#CustomerSalesAreaID").html("");
                        $.each(data, function (i, data) { // bind the dropdown list using json result
                            $('<option>',
                                {
                                    value: data.salesAreaID,
                                    text: data.salesAreaName
                                }).html(data.salesAreaName).appendTo("#CustomerSalesAreaID");
                        });

                    }
                    else {
                        console.log(v);
                    }
                },
                error: function (jqXhr, textStatus, errorMessage) {
                    alert("Error Populating Sales Area");
                }
            });
    });

    $("#CommunicationStateID").change(function () {
            var id = this.value;

            if (id != 0) {
                $("#state_error").html("");
            }

            $.ajax({
                type: 'POST',  // http method
                url: '@Url.Action("GetDistrictDetails", "Customer")',
                data: { Stateid: id },  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    var v = data;
                    if (status == 'success') {
                        $("#CommunicationDistrictId").html("");
                        $.each(data, function (i, data) { // bind the dropdown list using json result
                            $('<option>',
                                {
                                    value: data.districtID,
                                    text: data.districtName
                                }).html(data.districtName).appendTo("#CommunicationDistrictId");
                        });
                    }
                    else {
                        console.log(v);
                    }
                },
                error: function (jqXhr, textStatus, errorMessage) {
                    alert("Error Populating District Data");
                }
            });
    });
    $("#PerOrRegAddressStateID").change(function () {
            var id = this.value;
         if (id != 0) {
                $("#state_error").html("");
            }

            $.ajax({
                type: 'POST',  // http method
                url: '@Url.Action("GetDistrictDetails", "Customer")',
                data: { Stateid: id },  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    var v = data;

                    if (status == 'success') {
                        $("#PermanentDistrictId").html("");
                        $.each(data, function (i, data) { // bind the dropdown list using json result
                            $('<option>',
                                {
                                    value: data.districtID,
                                    text: data.districtName
                                }).html(data.districtName).appendTo("#PermanentDistrictId");
                        });

                        //var sameAscheck = document.getElementById("sameAddressCheck");
                        //if (sameAscheck) {
                        //    $('#PerOrRegAddressDistrict').val($('#comm_district').val());
                        //}
                    }
                    else {
                        console.log(v);
                    }
                },
                error: function (jqXhr, textStatus, errorMessage) {
                    alert("Error Populating District Data");
                }

           });

    });

    function sameAddressAsCommunication() {
        debugger;
        var sameAscheck = document.getElementById("sameAddressCheck");
        var permanent_add = document.querySelector("#permanent_add");
        // var sameas = false;


        if (document.getElementById("sameAddressCheck").checked == true) {

            if (document.applicationForm.CommunicationAddress1.value.trim() == "") {
                document.getElementById("comm_address1_error").innerHTML = "Address1 field cannot be left blank";
                document.applicationForm.CommunicationAddress1.focus();
                return false;
            }
            else {
                document.getElementById("comm_address1_error").innerHTML = "";
            }

            if (document.applicationForm.CommunicationAddress2.value.trim() == "") {
                document.getElementById("comm_address2_error").innerHTML = "Address2 field cannot be left blank";
                document.applicationForm.CommunicationAddress2.focus();
                return false;
            }
            else {
                document.getElementById("comm_address2_error").innerHTML = "";
            }

            if (document.applicationForm.CommunicationCity.value.trim() == "") {
                document.getElementById("comm_city_error").innerHTML = "City field cannot be left blank";
                document.applicationForm.CommunicationCity.focus();
                return false;
            }
            else {
                document.getElementById("comm_city_error").innerHTML = "";
            }

            if (document.applicationForm.CommunicationPinCode.value.trim() == "") {
                document.getElementById("comm_pincode_error").innerHTML = "Pin Code field cannot be left blank";
                document.applicationForm.CommunicationPinCode.focus()
                return (false);
            }
            else {
                var pin = document.applicationForm.CommunicationPinCode.value;
                if (pin.length < 6) {
                    document.getElementById("comm_pincode_error").innerHTML = "Pin Code, Must be six digits";
                    document.applicationForm.CommunicationPinCode.focus();
                    return false;
                }
                else {
                    document.getElementById("comm_pincode_error").innerHTML = "";
                }
            }

            if (document.applicationForm.CommunicationStateID.value == "0" || document.applicationForm.CommunicationStateID.value == "") {
                document.getElementById("comm_states_error").innerHTML = "State field cannot be left blank";
                document.applicationForm.CommunicationStateID.focus();
                return false;
            }
            else {
                document.getElementById("comm_states_error").innerHTML = "";
            }

            if (document.applicationForm.CommunicationDistrictId.value == "0" || document.applicationForm.CommunicationDistrictId.value == "") {
                document.getElementById("comm_district_error").innerHTML = "District field cannot be left blank";
                document.applicationForm.CommunicationDistrictId.focus();
                return false;
            }
            else {
                document.getElementById("comm_district_error").innerHTML = "";
            }



            if (document.applicationForm.CommunicationMobileNumber.value.trim() == "") {
                document.getElementById("comm_mobileNumber_error").innerHTML = "Mobile field cannot be left blank";
                document.applicationForm.CommunicationMobileNumber.focus();
                return false;

            }
            else {
                y = document.applicationForm.CommunicationMobileNumber.value.trim();
                if ((y.charAt(0) != "9") && (y.charAt(0) != "8") && (y.charAt(0) != "7") && (y.charAt(0) != "6")) {
                    document.getElementById("comm_mobileNumber_error").innerHTML = "Mobile Number should start with 6, 7, 8, 9";
                    document.applicationForm.CommunicationMobileNumber.focus();
                    return false
                }
                else if (y.length < 10 || y.length > 10) {
                    document.getElementById("comm_mobileNumber_error").innerHTML = "Invalid Mobile Number (e.g.: 9999990000)";
                    document.applicationForm.CommunicationMobileNumber.focus();
                    return false;
                }

                else {
                    document.getElementById("comm_mobileNumber_error").innerHTML = "";
                }
            }

            if (document.applicationForm.CommunicationEmail.value.trim() == "") {
                document.getElementById("comm_email_error").innerHTML = "Email field cannot be left blank";
                document.applicationForm.CommunicationEmail.focus();
                return (false);
            }
            else {
                var mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
                if (document.applicationForm.CommunicationEmail.value.match(mailformat)) {
                    document.getElementById("comm_email_error").innerHTML = "";
                    //return true
                }
                else {
                    document.getElementById("comm_email_error").innerHTML = "Invalid email id (e.g.: abc@gmail.com)";
                    document.applicationForm.CommunicationEmail.focus();
                    return (false);
                }
            }
            var id = $('#CommunicationStateID').val();

            $.ajax({
                type: 'POST',  // http method
                url: "GetDistrictDetails/Customer",
                data: { Stateid: id },  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    var v = data;

                    if (status == 'success') {
                        $("#PermanentDistrictId").html("");
                        $.each(data, function (i, data) { // bind the dropdown list using json result
                            $('<option>',
                                {
                                    value: data.districtID,
                                    text: data.districtName
                                }).html(data.districtName).appendTo("#PermanentDistrictId");
                        });
                        document.getElementById('PermanentDistrictId').value = document.getElementById('CommunicationDistrictId').value;
                    }
                    else {
                        console.log(v);
                    }
                },
                error: function (jqXhr, textStatus, errorMessage) {
                    alert("Error Populating District Data");
                }
            });

            $('#PerOrRegAddress1').val($('#CommunicationAddress1').val());
            $('#PerOrRegAddress2').val($('#CommunicationAddress2').val());
            $('#PerOrRegAddress3').val($('#CommunicationAddress3').val());
            $('#PerOrRegAddressLocation').val($('#CommunicationLocation').val());
            $('#PerOrRegAddressCity').val($('#CommunicationCity').val());
            $('#PerOrRegAddressStateID').val($('#CommunicationStateID').val());
            $('#PerOrRegAddressPinCode').val($('#CommunicationPinCode').val());
            $('#PerOrRegAddressDialCode').val($('#CommunicationDialCode').val());
            $('#PerOrRegAddressPhoneNumber').val($('#CommunicationPhoneNo').val());
            $('#PermanentFax').val($('#CommunicationFax').val());
            $('#PerOrRegAddressDialCode').val($('#CommunicationDialCode').val());
            $('#PermanentFaxCode').val($('#CommunicationFaxCode').val());


            var Distrid = $('#CommunicationDistrictId').val();
            var DistrictName = $("#CommunicationDistrictId option:selected").text();

            $('#PermanentDistrictId').val($('#CommunicationDistrictId').val());
            if (document.getElementById("sameAddressCheck").checked == true) {
                permanent_add.querySelectorAll("input, select").forEach(function (i) {
                    i.setAttribute("disabled", true);
                })
            }
            // sameas = true;

            document.getElementById('PermanentDistrictId').value = document.getElementById('CommunicationDistrictId').value;
        }
        else {

            $('#PerOrRegAddress1').val('');
            $('#PerOrRegAddress2').val('');
            $('#PerOrRegAddress3').val('');
            $('#PerOrRegAddressLocation').val('');
            $('#PerOrRegAddressCity').val('');
            $('#PerOrRegAddressStateID')[0].selectedIndex = 0;
            $('#PerOrRegAddressPinCode').val('');
            $('#PerOrRegAddressDialCode').val('');
            $('#PermanentFaxCode').val('');
            $('#PermanentDistrictId')[0].selectedIndex = 0;
            $('#PerOrRegAddressPhoneNumber').val('');
            $('#PermanentFax').val('');

            $("#PerOrRegAddressDistrict").html("");
            if (document.getElementById("sameAddressCheck").checked == false) {
                permanent_add.querySelectorAll("input, select").forEach(function (i) {
                    i.removeAttribute("disabled", true);
                })
            }

            // sameas = false;
        }
    }

    function ValidatePAN() {
        debugger;
        var panno = $('#CustomerIncomeTaxPan').val().trim();
        var OrgName = $('#IndividualOrgName').val().trim();
        var customerTbentityid = $("#CustomerTbentityID").val();
        var correctPANName = '';

        if (panno == '') {
            document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN field cannot be left blank";
            return;
        }

        var regex = /[A-Z]{5}[0-9]{4}[A-Z]{1}$/;

        if ($('#CustomerIncomeTaxPan').val().match(regex)) {
            document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN is valid";
        }
        else {
            document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN is not valid";
            return (false);
        }

        //if (OrgName == '') {
        //    alert('Enter Individual Or Org. Name');
        //    return;
        //}
        ////solo Propritorship 4th Char Pan should be 'P'
        //if (customerTbentityid == '2') {
        //    let forthdigitPan = panno.substr(3, 1);
        //    console.log(forthdigitPan);
        //    if (forthdigitPan != 'P') {
        //        console.log('Inside');
        //        alert('Enter Valid Pan');
        //        return;
        //    }
        //}

        //var result = false;

        //$.ajax({
        //    type: 'POST',  // http method
        //    url: "PANValidation/Customer",
        //    data: { PANNumber: panno },  // data to submit
        //    dataType: "json",
        //    success: function (data, status, xhr) {
        //        //debugger;
        //        var jsonData = JSON.parse(data);
        //        if (status == 'success' && jsonData['status-code'] == '101') {
        //            result = true;

        //            console.log(jsonData);
        //            console.log(result);
        //            //document.getElementById("address-tab").click();
        //            //document.getElementById("address-tab").classList.remove("disable");
        //            //document.applicationForm.IndividualOrgName.value = jsonData["result"]["name"];
        //            correctPANName = jsonData["result"]["name"];
        //            //localStorage.setItem("showregAddress", true)

        //            if (result == false) {
        //                document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN is not valid";
        //            }
        //            else {
        //                document.getElementById("incomeTaxPan_error").innerHTML = "";
        //            }
        //            console.log(correctPANName);
        //            console.log(OrgName);
        //            if (correctPANName != OrgName) {
        //                document.getElementById("incomeTaxPan_error").innerHTML = "Your pan card name not match with pan card name";
        //            }
        //            else {
        //                document.getElementById("incomeTaxPan_error").innerHTML = "";
        //            }

        //        }
        //        else {
        //            document.getElementById("incomeTaxPan_error").innerHTML = "Invalid PAN Number";
        //            console.log(jsonData['status-code']);
        //            //document.applicationForm.CustomerIncomeTaxPan.focus();
        //        }
        //    },
        //    error: function (jqXhr, textStatus, errorMessage) {
        //        document.getElementById("incomeTaxPan_error").innerHTML = "Invalid PAN Number";
        //        console.log(jsonData['status-code']);
        //        //document.applicationForm.CustomerIncomeTaxPan.focus();
        //    }
        //});

    }

    $("#CustomerTbentityID").change(function () {
            var id = this.value;
         if (id != 0) {
                $("#state_error").html("");
        }

        if (id == 10) {
            $('#lblPanText').text('Govt. Dept. Identification Details');
            $('#btnVerify').hide();
            $('#lblCustPOI').show();
            document.getElementById('IsDuplicatePanNo').value = "1";
        }
        else {
            $('#lblPanText').text('Income Tax PAN');
            $('#btnVerify').show();
            $('#lblCustPOI').hide();
        }

            @*$.ajax({
                type: 'POST',  // http method
                url: '@Url.Action("GetDistrictDetails", "Customer")',
                data: { Stateid: id },  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    var v = data;
                    if (status == 'success') {
                        $("#PermanentDistrictId").html("");
                        $.each(data, function (i, data) { // bind the dropdown list using json result
                            $('<option>',
                                {
                                    value: data.districtID,
                                    text: data.districtName
                                }).html(data.districtName).appendTo("#PermanentDistrictId");
                        });

                        //var sameAscheck = document.getElementById("sameAddressCheck");
                        //if (sameAscheck) {
                        //    $('#PerOrRegAddressDistrict').val($('#comm_district').val());
                        //}
                    }
                    else {
                        console.log(v);
                    }
                },
                error: function (jqXhr, textStatus, errorMessage) {
                    alert("Error Populating District Data");
                }

           });*@

    });


    @*$("#FormNumber").on("blur", function () {
        //debugger;
        var formNumber = document.getElementById("FormNumber").value;
        if (formNumber == "") {
            document.getElementById("formNumber_error").innerHTML = "Form No field cannot be left blank";
            return (false);
        }
        else {
            document.getElementById("formNumber_error").innerHTML = "";
        }

        if (document.getElementById("FormNumber").value.substring(0, 1) == "0") {
            document.getElementById("formNumber_error").innerHTML = "Form No should not start with 0";
            document.getElementById("FormNumber").value = "";
            document.getElementById("FormNumber").focus();
            return false;
        }

        if (document.getElementById("FormNumber").value.length < 10) {
            document.getElementById("formNumber_error").innerHTML = "Form No length must be 10 digit";
            document.getElementById("FormNumber").value = "";
            document.getElementById("FormNumber").focus();
            return false;
        }

        var fromNumberUsed = false;
        localStorage.setItem("FORMNOALREADYUSED", "1");

            $.ajax({
                type: 'POST',  // http method
                url: '@Url.Action("CheckformnumberDuplication", "Customer")',
                data: { FormNumber: formNumber },  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    console.log(data);
                    console.log(status);
                    var v = data;
                    if (status == 'success') {

                        //if (data == "Failed to load Customer Details")
                        //    document.getElementById("RBEName").value = "";
                        if (data.status == "0") {
                            fromNumberUsed = true;
                            document.getElementById("formNumber_error").innerHTML = "Form No is already used";
                            localStorage.setItem("FORMNOALREADYUSED", "0");
                        }
                        else {
                            fromNumberUsed = false;
                            document.getElementById("formNumber_error").innerHTML = "";
                        }
                    }
                    else {
                        //console.log(v);
                        fromNumberUsed = true;
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    //document.getElementById("RBEName").value = "";
                },
                statusCode: {
                    1024: function () {
                        //document.getElementById("RBEName").value = "";
                    }
                }
            });

        //console.log(fromNumberUsed);
        if (fromNumberUsed == true) {
            document.getElementById("formNumber_error").innerHTML = "Form No is already used";
            //return (false);
        }
        else {
            document.getElementById("formNumber_error").innerHTML = "";
            console.log('SAM');
        }

    });*@

    $("#CommunicationEmail").on("blur", function () {
        //debugger;
        var communicationEmail = document.getElementById("CommunicationEmail").value.trim();
        if (communicationEmail == "") {
            document.getElementById("comm_email_error").innerHTML = "Email field cannot be left blank";
            return (false);
        }
        else {
            document.getElementById("comm_email_error").innerHTML = "";
        }

        var mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
        if (communicationEmail.match(mailformat)) {
            document.getElementById("comm_email_error").innerHTML = "";
        }
        else {
            document.getElementById("comm_email_error").innerHTML = "Invalid email id (e.g.: abc@gmail.com)";
            document.getElementById("CommunicationEmail").value = "";
            //document.getElementById("CommunicationEmail").focus();
            return (false);
        }

        var emailUsed = false;
        localStorage.setItem("EMAILIDALREADYUSED", "1");

        @*$.ajax({
            type: 'POST',  // http method
            url: '@Url.Action("CheckEmailDuplication", "Customer")',
            data: { Emailid: communicationEmail },  // data to submit
            dataType: "json",
            success: function (data, status, xhr) {
                console.log(data);
                console.log(status);
                var v = data;
                if (status == 'success') {

                    //if (data == "Failed to load Customer Details")
                    //    document.getElementById("RBEName").value = "";
                    //console.log('Test');
                    //console.log(data.status);
                    //console.log(data.reason);
                    if (data.status == "0") {
                        emailUsed = true;
                        document.getElementById("comm_email_error").innerHTML = "Communication Email is already used";
                        localStorage.setItem("EMAILIDALREADYUSED", "0");
                    }
                    else {
                        emailUsed = false;
                        document.getElementById("comm_email_error").innerHTML = "";
                    }
                }
                else {
                    //console.log(v);
                    emailUsed = true;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                //document.getElementById("RBEName").value = "";
            },
            statusCode: {
                1024: function () {
                    //document.getElementById("RBEName").value = "";
                }
            }
        });*@

    });

    $("#CommunicationMobileNumber").on("blur", function () {
        //debugger;
        var communicationMobile = document.getElementById("CommunicationMobileNumber").value;
        if (communicationMobile == "") {
            document.getElementById("comm_mobileNumber_error").innerHTML = "Mobile No field cannot be left blank";
            return (false);
        }
        else {
            document.getElementById("comm_mobileNumber_error").innerHTML = "";
        }

        if (document.getElementById("CommunicationMobileNumber").value.substring(0, 1) == "0") {
            document.getElementById("comm_mobileNumber_error").innerHTML = "Mobile No should not start with 0";
            document.getElementById("CommunicationMobileNumber").value = "";
            document.getElementById("CommunicationMobileNumber").focus();
            return false;
        }

        if (document.getElementById("CommunicationMobileNumber").value.length < 10) {
            document.getElementById("comm_mobileNumber_error").innerHTML = "Mobile No length must be 10 digit";
            document.getElementById("CommunicationMobileNumber").value = "";
            document.getElementById("CommunicationMobileNumber").focus();
            return false;
        }

        var mobileNoUsed = false;
        localStorage.setItem("MOBILENUMBERREADYUSED", "1");

        @*$.ajax({
            type: 'POST',  // http method
            url: '@Url.Action("CheckMobilNoDuplication", "Customer")',
            data: { MobileNo: communicationMobile },  // data to submit
            dataType: "json",
            success: function (data, status, xhr) {
                console.log(data);
                console.log(status);
                var v = data;
                if (status == 'success') {

                    //if (data == "Failed to load Customer Details")
                    //    document.getElementById("RBEName").value = "";
                    //console.log('Test');
                    //console.log(data.status);
                    //console.log(data.reason);
                    if (data.status == "0") {
                        mobileNoUsed = true;
                        document.getElementById("comm_mobileNumber_error").innerHTML = "Communication Mobile No is already used";
                        localStorage.setItem("MOBILENUMBERREADYUSED", "0");
                    }
                    else {
                        mobileNoUsed = false;
                        document.getElementById("comm_mobileNumber_error").innerHTML = "";
                    }
                }
                else {
                    //console.log(v);
                    mobileNoUsed = true;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                //document.getElementById("RBEName").value = "";
            },
            statusCode: {
                1024: function () {
                    //document.getElementById("RBEName").value = "";
                }
            }
        });*@

    });

    $("#CustomerIncomeTaxPan").on("blur", function () {
        //debugger;
        var panNumber = document.getElementById("CustomerIncomeTaxPan").value.trim();

        var customerTbentityid = $("#CustomerTbentityID").val();
        localStorage.setItem("PANNOALREADYUSED", "1");
        localStorage.setItem("DUPLICATEPANUSED", "1");

        if (customerTbentityid == 10) {
            document.getElementById("incomeTaxPan_error").innerHTML = "";
            document.getElementById("IsDuplicatePanNo").value = "1";
            return;
        }

        if (panNumber == "") {
            document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN field cannot be left blank";
            return (false);
        }
        else {
            document.getElementById("incomeTaxPan_error").innerHTML = "";
        }

        var panNumberUsed = false;


        var districtId = $("#CommunicationDistrictId").val();
        var customerReferenceNo = $("#CustomerReferenceNo").val();

        if (districtId != 0 && customerTbentityid != "10") {

            $.ajax({
                type: 'POST',  // http method
                url: '@Url.Action("CheckPanCardDuplicationByDistrictidForCustomerUpdate", "Customer")',
                data: { DistrictId: districtId, IncomeTaxPan: panNumber, CustomerReferenceNo: customerReferenceNo },  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    console.log(data);
                    console.log(status);
                    var v = data;
                    if (status == 'success') {

                        console.log('Test');
                        console.log(data);
                        console.log(data.status);
                        console.log(data.reason);
                        if (data.status == "0") {
                            //document.getElementById("comm_district_error").innerHTML = "Pan already used";
                            localStorage.setItem("DUPLICATEPANUSED", "0");
                            document.getElementById('IsDuplicatePanNo').value = "0";
                        }
                        else {
                            localStorage.setItem("DUPLICATEPANUSED", "1");
                            document.getElementById('IsDuplicatePanNo').value = "1";
                            document.getElementById("comm_district_error").innerHTML = "";
                        }
                    }
                    else {
                        //console.log(v);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                },
                statusCode: {
                    1024: function () {
                    }
                }
            });
        }

        @*$.ajax({
            type: 'POST',  // http method
            url: '@Url.Action("CheckPanNoDuplication", "Customer")',
            data: { PanNo: panNumber },  // data to submit
            dataType: "json",
            success: function (data, status, xhr) {
                console.log(data);
                console.log(status);
                var v = data;
                if (status == 'success') {

                    if (data.status == "0") {
                        panNumberUsed = true;
                        document.getElementById("incomeTaxPan_error").innerHTML = "PAN No is already used";
                        localStorage.setItem("PANNOALREADYUSED", "0");
                    }
                    else {
                        panNumberUsed = false;
                        document.getElementById("incomeTaxPan_error").innerHTML = "";
                    }
                }
                else {
                    //console.log(v);
                    panNumberUsed = true;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                //document.getElementById("RBEName").value = "";
            },
            statusCode: {
                1024: function () {
                    //document.getElementById("RBEName").value = "";
                }
            }
        });*@


    });

    $("#CustomerIncomeTaxPan").keydown(function (e) {
        var k = e.keyCode || e.which;
        var ok = k >= 65 && k <= 90 || // A-Z
            k >= 96 && k <= 105 || // a-z
            k >= 35 && k <= 40 || // arrows
            k == 9 || //tab
            k == 46 || //del
            k == 8 || // backspaces
            (!e.shiftKey && k >= 48 && k <= 57); // only 0-9 (ignore SHIFT options)

        if (!ok || (e.ctrlKey && e.altKey)) {
            e.preventDefault();
        }
    });

    $("#CommunicationPinCode").on("blur", function () {
        //debugger;
        var communicationPinCode = document.getElementById("CommunicationPinCode").value;
        if (communicationPinCode == "") {
            document.getElementById("comm_pincode_error").innerHTML = "Pin code field cannot be left blank";
            return (false);
        }
        else {
            document.getElementById("comm_pincode_error").innerHTML = "";
        }

        if (document.getElementById("CommunicationPinCode").value.substring(0, 1) == "0") {
            document.getElementById("comm_pincode_error").innerHTML = "Pin code should not start with 0";
            document.getElementById("CommunicationPinCode").value = "";
            document.getElementById("CommunicationPinCode").focus();
            return false;
        }

        if (document.getElementById("CommunicationPinCode").value.length < 6) {
            document.getElementById("comm_pincode_error").innerHTML = "Pin code length must be 6 digit";
            document.getElementById("CommunicationPinCode").value = "";
            document.getElementById("CommunicationPinCode").focus();
            return false;
        }
    });

    $("#PerOrRegAddressPinCode").on("blur", function () {
        //debugger;
        var PinCode = document.getElementById("PerOrRegAddressPinCode").value;
        if (PinCode == "") {
            document.getElementById("perma_pincode_error").innerHTML = "Pin code field cannot be left blank";
            return (false);
        }
        else {
            document.getElementById("perma_pincode_error").innerHTML = "";
        }

        if (document.getElementById("PerOrRegAddressPinCode").value.substring(0, 1) == "0") {
            document.getElementById("perma_pincode_error").innerHTML = "Pin code should not start with 0";
            document.getElementById("PerOrRegAddressPinCode").value = "";
            document.getElementById("PerOrRegAddressPinCode").focus();
            return false;
        }

        if (document.getElementById("PerOrRegAddressPinCode").value.length < 6) {
            document.getElementById("perma_pincode_error").innerHTML = "Pin code length must be 6 digit";
            document.getElementById("PerOrRegAddressPinCode").value = "";
            document.getElementById("PerOrRegAddressPinCode").focus();
            return false;
        }
    });

    $("#KeyOffMobileNumber").on("blur", function () {
        //debugger;
        var OffMobileNumber = document.getElementById("KeyOffMobileNumber").value;
        if (OffMobileNumber == "") {
            document.getElementById("official_mobile_error").innerHTML = "Mobile No field cannot be left blank";
            return (false);
        }
        else {
            document.getElementById("official_mobile_error").innerHTML = "";
        }

        if (document.getElementById("KeyOffMobileNumber").value.substring(0, 1) == "0") {
            document.getElementById("official_mobile_error").innerHTML = "Mobile No should not start with 0";
            document.getElementById("KeyOffMobileNumber").value = "";
            document.getElementById("KeyOffMobileNumber").focus();
            return false;
        }

        if (document.getElementById("KeyOffMobileNumber").value.length < 10) {
            document.getElementById("official_mobile_error").innerHTML = "Mobile No length must be 10 digit";
            document.getElementById("KeyOffMobileNumber").value = "";
            document.getElementById("KeyOffMobileNumber").focus();
            return false;
        }
    });

    $("#KeyOffEmail").on("blur", function () {
        //debugger;
        var OffEmail = document.getElementById("KeyOffEmail").value.trim();

        if (OffEmail != "") {

            var mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
            if (OffEmail.match(mailformat)) {
                document.getElementById("KeyOffEmail_error").innerHTML = "";
                //return true
            }
            else {
                document.getElementById("KeyOffEmail_error").innerHTML = "Invalid email id (e.g.: abc@gmail.com)";
                document.getElementById("KeyOffEmail").focus();
                return (false);
            }
        }
    });

    $("#CustomerDateOfApplication").on("change", function () {
        //debugger;
        var selectedDate = document.getElementById("CustomerDateOfApplication").value.trim();
        console.log(selectedDate);

        if (selectedDate != "") {
            var today = new Date();
            today.setHours(0, 0, 0, 0);

            const myArray = document.getElementById("CustomerDateOfApplication").value.split("-");

            var varDate = new Date(myArray[2], (myArray[1] - 1), myArray[0], 0, 0, 0, 0);
            console.log(today);
            console.log(varDate);
            if (varDate > today) {
                document.getElementById("applicationDate_error").innerHTML = "Date of Application can not be a future date";
                setDates();
            }
            else {
                document.getElementById("applicationDate_error").innerHTML = "";
            }
        }

    });

    $("#CommunicationDistrictId").change(function () {
        debugger;
        localStorage.setItem("DUPLICATEPANUSED", "1");
        var id = this.value;
        var panno = $('#CustomerIncomeTaxPan').val().trim();
        var customerTbentityID = $('#CustomerTbentityID').val();

        document.getElementById('IsDuplicatePanNo').value = "1";
        document.getElementById('AllowPanDuplication').value = "N";
        var customerReferenceNo = $("#CustomerReferenceNo").val();

        if (id != 0 && customerTbentityID != "10") {

            $.ajax({
                type: 'POST',  // http method
                url: '@Url.Action("CheckPanCardDuplicationByDistrictidForCustomerUpdate", "Customer")',
                data: { DistrictId: id, IncomeTaxPan: panno, CustomerReferenceNo: customerReferenceNo},  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    console.log(data);
                    console.log(status);
                    var v = data;
                    if (status == 'success') {

                        console.log('Test');
                        console.log(data);
                        console.log(data.status);
                        console.log(data.reason);
                        if (data.status == "0") {
                            //document.getElementById("comm_district_error").innerHTML = "Pan already used";
                            localStorage.setItem("DUPLICATEPANUSED", "0");
                            document.getElementById('IsDuplicatePanNo').value = "0";
                        }
                        else {
                            localStorage.setItem("DUPLICATEPANUSED", "1");
                            document.getElementById('IsDuplicatePanNo').value = "1";
                            document.getElementById("comm_district_error").innerHTML = "";
                        }
                    }
                    else {
                        //console.log(v);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                },
                statusCode: {
                    1024: function () {
                    }
                }
            });
        }

    });
       

</script>