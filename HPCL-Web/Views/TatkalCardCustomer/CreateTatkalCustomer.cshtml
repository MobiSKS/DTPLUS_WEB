@model HPCL.Common.Models.ViewModel.MyHpOTCCardCustomer.TatkalCardCustomerModel
@using HPCL.Common.Resources;
@{
    ViewData["Title"] = "Request for My HP (OTC) Card";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="col-lg-12 px-0">
    <div class="bg-white p-2 p-md-4">
        <ul class="breadcrumb bread_custom bg-transparent m-0 pb-1 py-0 px-0">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "TatkalCardCustomer")" class="text_primary">Tatkal Card Customer</a> </li>
            <li class="breadcrumb-item font-weight-light">Create Tatkal Customer</li>
        </ul>
        <form name="TatkalCardCustomerCreationForm" method="post" asp-action="CreateTatkalCustomer" class="w-100" autocomplete="off" enctype="multipart/form-data">
            <div class="w-100">
                <div class="col-lg-12 col-md-12 col-12 pl-0 pr-0 mt-3">
                    <div class="border-1 rounded border-grey pb-0">
                        <p class="text_primary px-3 py-2 bg-grey m-0 font-weight-bold">Create Tatkal Customer</p>
                        <div class="alert alert-danger alert-cust-success" id="dvRemarks" style="@(Model.Remarks=="" ? "display:none":"display:block")">
                            @Html.DisplayFor(m => m.Remarks)
                        </div>
                        <div class="col-lg-12 col-md-12 col-12 pt-2 pb-0">
                            <p class="text-dark px-0 py-2 mb-3 font-weight-bold" style="border-bottom:1px solid #ccc;">Application Details</p>
                            <div class="d-flex align-items-center flex-wrap">
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal col-md-4 col-12">Zonal Office <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.ZonalOffice, new SelectList(Model.CustomerZonalOfficeMdl, "ZonalOfficeID", "ZonalOfficeName"), new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="zonalOffice_error"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal offset-md-1 col-md-4 col-12">Regional Office <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.RegionalOffice, new SelectList(Model.CustomerRegionMdl, "RegionalOfficeID", "RegionalOfficeName"), new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="regionalOffice_error"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center flex-wrap">
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal col-md-4 col-12">Form Number<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.TextBoxFor(m => m.FormNumber, new { @class = "form-control", maxlength = "10", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                <span class="error" id="formNumber_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal offset-md-1 col-md-4 col-12">Application Date <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.TextBoxFor(m => m.DateOfApplication, new { @class = "form-control", autocomplete = "off" })  @*@type = "date"*@
                                                <span class="error" id="applicationDate_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center flex-wrap">
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal col-md-4 col-12">Signed On<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.TextBoxFor(m => m.SignedOn, new { @class = "form-control", autocomplete = "off" })  @*@type = "date"*@
                                                <span class="error" id="SignedOn_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal offset-md-1 col-md-4 col-12">State <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.CommunicationStateId, new SelectList(Model.CustomerStateMdl, "StateID", "StateName"), new { @class = "form-control" })
                                                <span class="error" id="comm_states_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center flex-wrap">
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal col-md-4 col-12">Secret Question <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.DropDownListFor(m => m.KeyOfficialSecretQuestion, new SelectList(Model.CustomerSecretQueMdl, "SecretQuestionId", "SecretQuestionName"), new { @class = "form-control" })
                                            </div>
                                            <span class="error" id="KeyOfficialSecretQuestion_error"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal offset-md-1  col-md-4 col-12">Secret Answer<sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.TextBoxFor(m => m.KeyOfficialSecretAnswer, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                            </div>
                                            <span class="error" id="KeyOfficialSecretAnswer_error"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>

                <div class="col-lg-12 col-md-12 col-12 pl-0 pr-0 mt-3">
                    <div class="border-1 rounded border-grey pb-0">
                        <p class="text_primary px-3 py-2 bg-grey m-0 font-weight-bold">Personal Details</p>
                        <div class="col-lg-12 col-md-12 col-12 pt-2 pb-0">
                            <div class="d-flex align-items-center flex-wrap">
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal col-md-4 col-12">Individual/Org. Name <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="row">
                                                <div class="col-4">
                                                    <div class="custom_select">
                                                        @Html.DropDownListFor(x => x.IndividualOrgNameTitle, new[]{
                                                           new SelectListItem(){ Text = "Title", Value = "0" },
                                                           new SelectListItem(){ Text = "Mr", Value = "Mr"},
                                                           new SelectListItem(){ Text = "Ms", Value = "Ms"},
                                                           new SelectListItem(){ Text = "M/s", Value = "M/s"},
                                                           }, null, new { @class = "form-control px-0" })
                                                    </div>
                                                    <span class="error" id="salutaion_error"></span>
                                                </div>
                                                <div class="col-8 pl-0">
                                                    @Html.TextBoxFor(m => m.IndividualOrgName, new { @class = "form-control", autocomplete = "off", maxlength = "80" })
                                                    <span class="error" id="customername_error"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal offset-md-1 col-md-4 col-12">Name on Card <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.TextBoxFor(m => m.NameOnCard, new { @class = "form-control", autocomplete = "off", maxlength = "22" })
                                                <span class="error" id="nameOnCard_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center flex-wrap">
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal col-md-4 col-12">Mobile No <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.TextBoxFor(m => m.CommunicationMobileNo, new { @class = "form-control", maxlength = "10", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                <div class="error" id="comm_mobileNumber_error"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal offset-md-1 col-md-4 col-12">Ph (Off) <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="row">
                                                <div class="col-4">
                                                    @Html.TextBoxFor(m => m.CommunicationDialCode, new { @class = "form-control", maxlength = "4", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <div class="error" id="CommunicationDialCode_error"></div>
                                                </div>
                                                <div class="col-8 pl-0">
                                                    @Html.TextBoxFor(m => m.CommunicationPhonePart2, new { @class = "form-control", maxlength = "8", onkeypress = "return isNumberKey(event)", autocomplete = "off" })
                                                    <div class="error" id="CommunicationPhonePart2_error"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center flex-wrap">
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal col-md-4 col-12">Email <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.TextBoxFor(m => m.CommunicationEmailid, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                                <div class="error" id="comm_email_error"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal offset-md-1 col-md-4 col-12">Address <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @*<textarea class="form-control" id="Textarea1" rows="2"></textarea>*@
                                                @Html.TextBoxFor(m => m.CommunicationAddress1, new { @class = "form-control", autocomplete = "off", maxlength = "50" })
                                                <span class="error" id="comm_address1_error"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center flex-wrap">
                                <div class="col-lg-6 col-12">
                                    <div class="d-flex align-items-center flex-wrap mb-3">
                                        <label class="font-weight-normal col-md-4 col-12">Income Tax PAN <sup class="text-danger">*</sup></label>
                                        <div class="col-md-7 col-12">
                                            <div class="custom_select">
                                                @Html.TextBoxFor(m => m.IncomeTaxPan, new { @class = "form-control", @style = "text-transform:uppercase", autocomplete = "off", maxlength = "10" })
                                                <span class="error" id="incomeTaxPan_error"></span>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="clearfix"></div>
                <div class="d-flex align-items-center justify-content-center mt-3 mb-0">
                    <div class="px-2">
                        <button class="btn btn_primary" type="submit" onclick="return ValidateMandatoryFields()">@Label.Submit</button>
                    </div>
                    <div class="px-2">
                        <button class="btn btn_primary" type="button" id="btnFooterReset">@Label.Reset</button>
                    </div>
                </div>
            </div>
        </form>
        <div class="clearfix"></div>
    </div>
</div>

<script type="text/javascript">
    var custDateOfApplication = $("#DateOfApplication").val();
    var OfficialDOB = $("#SignedOn").val();
    var notFoundError = "@ViewBag.NotFoundError";

    $(document).ready(function () {

        localStorage.setItem("PANNOALREADYUSED", "1");

        if (notFoundError == "") {
            if (custDateOfApplication == "") {
                $("#DateOfApplication").datepicker({
                    "setDate": new Date(),
                    "autoclose": true,
                    dateFormat: 'dd-mm-yy'
                });
                setDates();
            }
            else {
                $("#DateOfApplication").datepicker({ dateFormat: 'dd-mm-yy' });
            }

            if (OfficialDOB == "") {
                $("#SignedOn").datepicker({
                    "setDate": new Date(),
                    "autoclose": true,
                    dateFormat: 'dd-mm-yy'
                });
                //setDates();
            }
            else {
                $("#SignedOn").datepicker({ dateFormat: 'dd-mm-yy' });
            }


        }
    });

    function setDates() {
        var d = new Date();

        var month = d.getMonth() + 1;
        var day = d.getDate();
        var output = (day < 10 ? '0' : '') + day + '-' +
            (month < 10 ? '0' : '') + month + '-' +
            d.getFullYear();

        $("#DateOfApplication").val(output);
        $("#SignedOn").val(output);

    };

    // on Zone selection Change
    $("#ZonalOffice").change(function () {
        var id = this.value;
            if (id != 0) {
                $("#regionalOffice_error").html("");
            }
            $.ajax({
                type: 'POST',  // http method
                url: '@Url.Action("GetRegionalDetailsDropDown", "TatkalCardCustomer")',
                data: { ZonalOfficeID: id },  // data to submit
                dataType: "json",
                success: function (data, status, xhr) {
                    var v = data;
                    if (status == 'success') {
                        $("#RegionalOffice").html("");
                        $.each(data, function (i, data) { // bind the dropdown list using json result
                            $('<option>',
                                {
                                    value: data.regionalOfficeID,
                                    text: data.regionalOfficeName
                                }).html(data.regionalOfficeName).appendTo("#RegionalOffice");
                        });

                    }
                    else {
                        console.log(v);
                    }
                },
                error: function (jqXhr, textStatus, errorMessage) {
                    alert("Error Populating Customer Region");
                }
            });
    });

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode = 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    $("#FormNumber").on("blur", function () {
        //debugger;
        var formNumber = document.getElementById("FormNumber").value;
        if (formNumber == "") {
            document.getElementById("formNumber_error").innerHTML = "Form No is required";
            return (false);
        }
        else {
            document.getElementById("formNumber_error").innerHTML = "";
        }

        if (document.getElementById("FormNumber").value.substring(0, 1) == "0") {
            document.getElementById("formNumber_error").innerHTML = "Form No should not start with 0";
            document.getElementById("FormNumber").value = "";
            document.getElementById("FormNumber").focus();
            return false;
        }

        if (document.getElementById("FormNumber").value.length < 10) {
            document.getElementById("formNumber_error").innerHTML = "Form No length must be 10 digit";
            document.getElementById("FormNumber").value = "";
            document.getElementById("FormNumber").focus();
            return false;
        }

        var formNumberUsed = false;
        localStorage.setItem("FORMNOALREADYUSED", "1");

        $.ajax({
            type: 'POST',  // http method
            url: '@Url.Action("CheckformnumberDuplication", "TatkalCardCustomer")',
            data: { FormNumber: formNumber },  // data to submit
            dataType: "json",
            success: function (data, status, xhr) {
                console.log(data);
                console.log(status);

                if (status == 'success') {

                    //if (data == "Failed to load Customer Details")
                    //    document.getElementById("RBEName").value = "";
                    if (data.status == "0") {
                        formNumberUsed = true;
                        document.getElementById("formNumber_error").innerHTML = "Form No is already used";
                        localStorage.setItem("FORMNOALREADYUSED", "0");
                    }
                    else {
                        formNumberUsed = false;
                        document.getElementById("formNumber_error").innerHTML = "";
                    }
                }
                else {
                    //console.log(v);
                    formNumberUsed = true;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                //document.getElementById("RBEName").value = "";
            },
            statusCode: {
                1024: function () {
                    //document.getElementById("RBEName").value = "";
                }
            }
        });

        //console.log(fromNumberUsed);
        if (formNumberUsed == true) {
            document.getElementById("formNumber_error").innerHTML = "Form No is already used";
            //return (false);
        }
        else {
            document.getElementById("formNumber_error").innerHTML = "";
        }

    });

    $("#CommunicationMobileNo").on("blur", function () {
        //debugger;
        var communicationMobile = document.getElementById("CommunicationMobileNo").value;
        if (communicationMobile == "") {
            document.getElementById("comm_mobileNumber_error").innerHTML = "communication Mobile No is required";
            return (false);
        }
        else {
            document.getElementById("comm_mobileNumber_error").innerHTML = "";
        }

        if (document.getElementById("CommunicationMobileNo").value.substring(0, 1) == "0") {
            document.getElementById("comm_mobileNumber_error").innerHTML = "Mobile No should not start with 0";
            document.getElementById("CommunicationMobileNo").value = "";
            document.getElementById("CommunicationMobileNo").focus();
            return false;
        }

        if (document.getElementById("CommunicationMobileNo").value.length < 10) {
            document.getElementById("comm_mobileNumber_error").innerHTML = "Mobile No length must be 10 digit";
            document.getElementById("CommunicationMobileNo").value = "";
            document.getElementById("CommunicationMobileNo").focus();
            return false;
        }

        var mobileNoUsed = false;
        localStorage.setItem("MOBILENUMBERREADYUSED", "1");

        @*$.ajax({
            type: 'POST',  // http method
            url: '@Url.Action("CheckMobilNoDuplication", "TatkalCardCustomer")',
            data: { MobileNo: communicationMobile },  // data to submit
            dataType: "json",
            success: function (data, status, xhr) {
                console.log(data);
                console.log(status);

                if (status == 'success') {

                    //console.log('Test');
                    //console.log(data.status);
                    //console.log(data.reason);
                    if (data.status == "0") {
                        mobileNoUsed = true;
                        document.getElementById("comm_mobileNumber_error").innerHTML = "Communication Mobile No is already used";
                        localStorage.setItem("MOBILENUMBERREADYUSED", "0");
                    }
                    else {
                        mobileNoUsed = false;
                        document.getElementById("comm_mobileNumber_error").innerHTML = "";
                    }
                }
                else {
                    document.getElementById("comm_mobileNumber_error").innerHTML = "Communication Mobile No is already used";
                    mobileNoUsed = true;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                document.getElementById("comm_mobileNumber_error").innerHTML = "Communication Mobile No is already used";
            },
            statusCode: {
                1024: function () {
                    document.getElementById("comm_mobileNumber_error").innerHTML = "Communication Mobile No is already used";
                }
            }
        });*@

    });

    $("#CommunicationEmailid").on("blur", function () {
        //debugger;
        var communicationEmail = document.getElementById("CommunicationEmailid").value;
        if (communicationEmail == "") {
            document.getElementById("comm_email_error").innerHTML = "communication Email is required";
            return (false);
        }
        else {
            document.getElementById("comm_email_error").innerHTML = "";
        }

        var mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
        if (communicationEmail.match(mailformat)) {
            document.getElementById("comm_email_error").innerHTML = "";
            //return true
        }
        else {
            document.getElementById("comm_email_error").innerHTML = "Invalid email id (e.g.: abc@gmail.com)";
            document.getElementById("CommunicationEmailid").focus();
            return (false);
        }

        var emailUsed = false;
        localStorage.setItem("EMAILIDALREADYUSED", "1");

        @*$.ajax({
            type: 'POST',  // http method
            url: '@Url.Action("CheckEmailDuplication", "TatkalCardCustomer")',
            data: { Emailid: communicationEmail },  // data to submit
            dataType: "json",
            success: function (data, status, xhr) {
                console.log(data);
                console.log(status);
                if (status == 'success') {

                    //if (data == "Failed to load Customer Details")
                    //console.log('Test');
                    //console.log(data.status);
                    //console.log(data.reason);
                    if (data.status == "0") {
                        emailUsed = true;
                        document.getElementById("comm_email_error").innerHTML = "Communication Email is already used";
                        localStorage.setItem("EMAILIDALREADYUSED", "0");
                    }
                    else {
                        emailUsed = false;
                        document.getElementById("comm_email_error").innerHTML = "";
                    }
                }
                else {
                    //console.log(v);
                    document.getElementById("comm_email_error").innerHTML = "Communication Email is already used";
                    emailUsed = true;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                document.getElementById("comm_email_error").innerHTML = "Communication Email is already used";
            },
            statusCode: {
                1024: function () {
                    document.getElementById("comm_email_error").innerHTML = "Communication Email is already used";
                }
            }
        });*@

    });

    function ValidateMandatoryFields() {
        debugger;

        var ret = false;

        if (document.getElementById("ZonalOffice").value == "" || document.getElementById("ZonalOffice").value == "0") {
            document.getElementById("zonalOffice_error").innerHTML = "The Zonal Office can not be left blank";
            document.getElementById("ZonalOffice").focus();
            return ret;
        }
        else {
            document.getElementById("zonalOffice_error").innerHTML = "";
        }

        if (document.getElementById("RegionalOffice").value == "" || document.getElementById("RegionalOffice").value == "0") {
            document.getElementById("regionalOffice_error").innerHTML = "The Regional Office can not be left blank";
            document.getElementById("RegionalOffice").focus();
            return ret;
        }
        else {
            document.getElementById("regionalOffice_error").innerHTML = "";
        }

        if (document.getElementById("FormNumber").value == "") {
            document.getElementById("formNumber_error").innerHTML = "Form Number field can not be left blank";
            //document.getElementById("FormNumber").focus();
            return ret;
        }
        else {
            document.getElementById("formNumber_error").innerHTML = "";
        }

        if (document.getElementById("DateOfApplication").value == "") {
            document.getElementById("applicationDate_error").innerHTML = "Application date field can not be left blank";
            document.getElementById("DateOfApplication").focus();
            return ret;
        }
        else {
            document.getElementById("applicationDate_error").innerHTML = "";
        }
               
        var today = new Date();
        today.setHours(0, 0, 0, 0);

        const myArray = document.getElementById("DateOfApplication").value.split("-");

        var varDate = new Date(myArray[2], (myArray[1] - 1), myArray[0], 0, 0, 0, 0);
        console.log(today);
        console.log(varDate);
        if (varDate > today) {
            document.getElementById("applicationDate_error").innerHTML = "Application Date: should be less or equal to Today's Date";
            //document.getElementById("DateOfApplication").focus();
            return ret;
        }

        if (document.getElementById("SignedOn").value == "") {
            document.getElementById("SignedOn_error").innerHTML = "Signed On field can not be left blank";
            document.getElementById("SignedOn").focus();
            return ret;
        }
        else {
            document.getElementById("SignedOn_error").innerHTML = "";
        }

        const myArray1 = document.getElementById("SignedOn").value.split("-");

        var varDate1 = new Date(myArray1[2], (myArray1[1] - 1), myArray1[0], 0, 0, 0, 0);

        if (varDate1 > today) {
            document.getElementById("SignedOn_error").innerHTML = "Signed On: should be less or equal to Today's Date";
            return ret;
        }

        if (document.getElementById("CommunicationStateId").value == "0") {
            document.getElementById("comm_states_error").innerHTML = "The State field can not be left blank";
            document.getElementById("CommunicationStateId").focus();
            return ret;
        }
        else {
            document.getElementById("comm_states_error").innerHTML = "";
        }

        if (document.getElementById("KeyOfficialSecretQuestion").value == "0") {
            document.getElementById("KeyOfficialSecretQuestion_error").innerHTML = "The Secret Question field can not be left blank";
            document.getElementById("KeyOfficialSecretQuestion").focus();
            return ret;
        }
        else {
            document.getElementById("KeyOfficialSecretQuestion_error").innerHTML = "";
        }

        if (document.getElementById("KeyOfficialSecretAnswer").value.trim() == "") {
            document.getElementById("KeyOfficialSecretAnswer_error").innerHTML = "The Secret Answer field can not be left blank";
            document.getElementById("KeyOfficialSecretAnswer").focus();
            return ret;
        }
        else {
            document.getElementById("KeyOfficialSecretAnswer_error").innerHTML = "";
        }

        if (document.getElementById("IndividualOrgNameTitle").value == "0") {
            document.getElementById("salutaion_error").innerHTML = "Select Title";
            document.getElementById("IndividualOrgNameTitle").focus();
            return ret;
        }
        else {
            document.getElementById("salutaion_error").innerHTML = "";
        }

        if (document.getElementById("IndividualOrgName").value.trim() == "") {
            document.getElementById("customername_error").innerHTML = "Individual/Org. name can not be left blank";
            document.getElementById("IndividualOrgName").focus();
            return ret;
        }
        else {
            document.getElementById("customername_error").innerHTML = "";
        }

        var nameCheck = /^[A-Za-z]{2,40}$/;
        if (document.getElementById("IndividualOrgName").value.match(nameCheck)) {
            document.getElementById("customername_error").innerHTML = "";
        }
        else {
            document.getElementById("customername_error").innerHTML = "Individual/Org. name field should not be any special characters";
            document.getElementById("IndividualOrgName").focus();
            return ret;
        }

        if (!isNaN(document.getElementById("IndividualOrgName").value.trim())) {
            document.getElementById("customername_error").innerHTML = "Name can not be a number";
            document.getElementById("IndividualOrgName").focus();
            return false;
        }
        else {
            document.getElementById("customername_error").innerHTML = "";
        }

        if (document.getElementById("NameOnCard").value.trim() == "") {
            document.getElementById("nameOnCard_error").innerHTML = "The CardName field can not be left blank";
            document.getElementById("NameOnCard").focus();
            return ret;
        }
        else {
            document.getElementById("nameOnCard_error").innerHTML = "";
        }

        if (document.getElementById("NameOnCard").value.match(nameCheck)) {
            document.getElementById("nameOnCard_error").innerHTML = "";
        }
        else {
            document.getElementById("nameOnCard_error").innerHTML = "Name on Card field should not be any special characters";
            document.getElementById("NameOnCard").focus();
            return ret;
        }

        if (!isNaN(document.getElementById("NameOnCard").value.trim())) {
            document.getElementById("nameOnCard_error").innerHTML = "Name On Card can not be a number";
            document.getElementById("NameOnCard").focus();
            return false;
        }
        else {
            document.getElementById("nameOnCard_error").innerHTML = "";
        }

        if (document.getElementById("CommunicationMobileNo").value.trim() == "") {
            document.getElementById("comm_mobileNumber_error").innerHTML = "The Mobile field can not be left blank";
            document.getElementById("CommunicationMobileNo").focus();
            return ret;
        }
        else {
            document.getElementById("comm_mobileNumber_error").innerHTML = "";
        }

        if (document.getElementById("CommunicationDialCode").value.trim() == "") {
            document.getElementById("CommunicationPhonePart2_error").innerHTML = "Please Enter STD code and Phone number";
            document.getElementById("CommunicationDialCode").focus();
            return ret;
        }
        else {
            document.getElementById("CommunicationPhonePart2_error").innerHTML = "";
        }

        if (document.getElementById("CommunicationPhonePart2").value.trim() == "") {
            document.getElementById("CommunicationPhonePart2_error").innerHTML = "Please Enter STD code and Phone number";
            document.getElementById("CommunicationPhonePart2").focus();
            return ret;
        }
        else {
            document.getElementById("CommunicationPhonePart2_error").innerHTML = "";
        }

        var stdCode = document.getElementById("CommunicationDialCode").value.trim();
        if (stdCode != "") {

            if (stdCode.length < 2 || stdCode.length > 4) {
                document.getElementById("CommunicationDialCode_error").innerHTML = "Length 2 to 4 digits";
                document.getElementById("CommunicationDialCode").focus();
                return false;
            }
            else {
                document.getElementById("CommunicationDialCode_error").innerHTML = "";
            }

        }
        else {
            document.getElementById("CommunicationDialCode_error").innerHTML = "";
        }

        var phno = document.getElementById("CommunicationPhonePart2").value.trim();
        if (phno != "") {
            if (phno.charAt(0) == "0") {
                document.getElementById("CommunicationPhonePart2_error").innerHTML = "Phone no can not start with 0";
                document.getElementById("CommunicationPhonePart2").focus();
                return false;
            }
            else {
                document.getElementById("CommunicationPhonePart2_error").innerHTML = "";
            }

            if (phno.length < 6 || phno.length > 8) {
                document.getElementById("CommunicationPhonePart2_error").innerHTML = "Phone no length 6 to 8 digits";
                document.getElementById("CommunicationPhonePart2").focus();
                return false;
            }
            else {
                document.getElementById("CommunicationPhonePart2_error").innerHTML = "";
            }

        }
        else {
            document.getElementById("CommunicationPhonePart2_error").innerHTML = "";
        }


        if (document.getElementById("CommunicationEmailid").value.trim() == "") {
            document.getElementById("comm_email_error").innerHTML = "The Email field can not be left blank";
            document.getElementById("CommunicationEmailid").focus();
            return ret;
        }
        else {
            var mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
            if (document.getElementById("CommunicationEmailid").value.match(mailformat)) {
                document.getElementById("comm_email_error").innerHTML = "";
                //return true
            }
            else {
                document.getElementById("comm_email_error").innerHTML = "Invalid email id (e.g.: abc@gmail.com)";
                document.getElementById("CommunicationEmailid").focus();
                return (false);
            }
        }

        if (document.getElementById("CommunicationAddress1").value.trim() == "") {
            document.getElementById("comm_address1_error").innerHTML = "The Address field can not be left blank";
            document.getElementById("CommunicationAddress1").focus();
            return ret;
        }
        else {
            document.getElementById("comm_address1_error").innerHTML = "";
        }

        if (document.getElementById("IncomeTaxPan").value.trim() == "") {
            document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN can not be left blank";
            //document.getElementById("IncomeTaxPan").focus();
            return ret;
        }
        else {
            document.getElementById("incomeTaxPan_error").innerHTML = "";
        }


        //if (localStorage.getItem("MOBILENUMBERREADYUSED") == 0) {
        //    document.getElementById("comm_mobileNumber_error").innerHTML = "Communication Mobile No is already used";
        //    return (false);
        //}
        //else {
        //    document.getElementById("comm_mobileNumber_error").innerHTML = "";
        //}

        //if (localStorage.getItem("EMAILIDALREADYUSED") == 0) {
        //    document.getElementById("comm_email_error").innerHTML = "Communication Email is already used";
        //    return (false);
        //}
        //else {
        //    document.getElementById("comm_email_error").innerHTML = "";
        //}


        if (localStorage.getItem("FORMNOALREADYUSED") == 0) {
            document.getElementById("formNumber_error").innerHTML = "Form No is already used";
            return (false);
        }
        else {
            document.getElementById("formNumber_error").innerHTML = "";
        }

        if (localStorage.getItem("PANNOALREADYUSED") == 0) {
            document.getElementById("incomeTaxPan_error").innerHTML = "PAN No is already used";
            return (false);
        }
        else {
            document.getElementById("incomeTaxPan_error").innerHTML = "";
        }


        if (document.getElementById("IncomeTaxPan").value.trim() == "") {
            document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN is required";
            //document.getElementById("IncomeTaxPan").focus();
            return ret;
        }
        else {
            var result = false;

            if (localStorage.getItem("PANNOANDNAMEMATCHING") == 0) {
                document.getElementById("incomeTaxPan_error").innerHTML = "Your pan card name not match with pan card name";
                return (false);
            }
            else {
                document.getElementById("incomeTaxPan_error").innerHTML = "";
            }

        }

        //if (ret == false)
        //    return ret;

        return true;
    }

    $("#btnFooterReset").click(function () {
        debugger;

        document.getElementById("ZonalOffice").value = "0"
        document.getElementById("zonalOffice_error").innerHTML = "";
        document.getElementById("RegionalOffice").value = "0"
        document.getElementById("regionalOffice_error").innerHTML = "";
        document.getElementById("FormNumber").value = "";
        document.getElementById("formNumber_error").innerHTML = "";
        document.getElementById("applicationDate_error").innerHTML = "";
        document.getElementById("SignedOn_error").innerHTML = "";
        document.getElementById("CommunicationStateId").value = "0";
        document.getElementById("comm_states_error").innerHTML = "";
        document.getElementById("KeyOfficialSecretQuestion").value = "0"
        document.getElementById("KeyOfficialSecretQuestion_error").innerHTML = "";
        document.getElementById("KeyOfficialSecretAnswer").value = ""
        document.getElementById("KeyOfficialSecretAnswer_error").innerHTML = "";
        document.getElementById("IndividualOrgNameTitle").value = "0"
        document.getElementById("salutaion_error").innerHTML = "";
        document.getElementById("IndividualOrgName").value = "";
        document.getElementById("customername_error").innerHTML = "";
        document.getElementById("NameOnCard").value = "";
        document.getElementById("nameOnCard_error").innerHTML = "";
        document.getElementById("CommunicationMobileNo").value = "";
        document.getElementById("comm_mobileNumber_error").innerHTML = "";
        document.getElementById("CommunicationEmailid").value = "";
        document.getElementById("comm_email_error").innerHTML = "";
        document.getElementById("CommunicationAddress1").value = "";
        document.getElementById("comm_address1_error").innerHTML = "";
        document.getElementById("IncomeTaxPan").value = "";
        document.getElementById("incomeTaxPan_error").innerHTML = "";
        setDates();

    });

    $("#IncomeTaxPan").keydown(function (e) {
        var k = e.keyCode || e.which;
        var ok = k >= 65 && k <= 90 || // A-Z
            k >= 96 && k <= 105 || // a-z
            k >= 35 && k <= 40 || // arrows
            k == 9 || //tab
            k == 46 || //del
            k == 8 || // backspaces
            (!e.shiftKey && k >= 48 && k <= 57); // only 0-9 (ignore SHIFT options)

        if (!ok || (e.ctrlKey && e.altKey)) {
            e.preventDefault();
        }
    });

    $("#IncomeTaxPan").on("blur", function () {
        //debugger;
        var panNumber = document.getElementById("IncomeTaxPan").value;


        if (panNumber == "") {
            document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN No is required";
            return (false);
        }
        else {
            document.getElementById("incomeTaxPan_error").innerHTML = "";
        }

        var regex = /[A-Z]{5}[0-9]{4}[A-Z]{1}$/;

        if ($('#IncomeTaxPan').val().match(regex)) {
            document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN is valid";
        }
        else {
            document.getElementById("incomeTaxPan_error").innerHTML = "Income Tax PAN is not valid";
            document.getElementById("IncomeTaxPan").value = "";
            return (false);
        }

        var panNumberUsed = false;
        localStorage.setItem("PANNOALREADYUSED", "1");

        @*$.ajax({
            type: 'POST',  // http method
            url: '@Url.Action("CheckPanNoDuplication", "Common")',
            data: { PanNo: panNumber },  // data to submit
            dataType: "json",
            success: function (data, status, xhr) {
                console.log(data);
                console.log(status);
                var v = data;
                if (status == 'success') {

                    if (data.status == "0") {
                        panNumberUsed = true;
                        document.getElementById("incomeTaxPan_error").innerHTML = "PAN No is already used";
                        localStorage.setItem("PANNOALREADYUSED", "0");
                    }
                    else {
                        panNumberUsed = false;
                        document.getElementById("incomeTaxPan_error").innerHTML = "";
                    }
                }
                else {
                    //console.log(v);
                    panNumberUsed = true;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                //document.getElementById("RBEName").value = "";
            },
            statusCode: {
                1024: function () {
                    //document.getElementById("RBEName").value = "";
                }
            }
        });*@


    });

    $("#DateOfApplication").on("change", function () {
        //debugger;
        var selectedDate = document.getElementById("DateOfApplication").value.trim();
        console.log(selectedDate);

        if (selectedDate != "") {
            var today = new Date();
            today.setHours(0, 0, 0, 0);

            const myArray = document.getElementById("DateOfApplication").value.split("-");

            var varDate = new Date(myArray[2], (myArray[1] - 1), myArray[0], 0, 0, 0, 0);
            console.log(today);
            console.log(varDate);
            if (varDate > today) {
                document.getElementById("applicationDate_error").innerHTML = "Application Date: should be less or equal to Today's Date";
                setDates();
            }
            else {
                document.getElementById("applicationDate_error").innerHTML = "";
            }
        }

    });

    $("#SignedOn").on("change", function () {
        //debugger;
        var selectedDate = document.getElementById("SignedOn").value.trim();
        console.log(selectedDate);

        if (selectedDate != "") {
            var today = new Date();
            today.setHours(0, 0, 0, 0);

            const myArray = document.getElementById("SignedOn").value.split("-");

            var varDate = new Date(myArray[2], (myArray[1] - 1), myArray[0], 0, 0, 0, 0);
            console.log(today);
            console.log(varDate);
            if (varDate > today) {
                document.getElementById("SignedOn_error").innerHTML = "Signed On: should be less or equal to Today's Date";
                setDates();
            }
            else {
                document.getElementById("SignedOn_error").innerHTML = "";
            }
        }

    });


</script>