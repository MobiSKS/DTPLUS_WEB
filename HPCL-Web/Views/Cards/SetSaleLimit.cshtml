@model HPCL.Common.Models.ViewModel.Cards.GetCardLimit

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.js"></script>

<div class="bg-white p-2 p-md-4">
    <ul class="breadcrumb bread_custom bg-transparent m-0 pb-1 py-0 px-0">
        <li class="breadcrumb-item"><a href="@Url.Action("Index")" class="text_primary">Cards</a> </li>
        <li class="breadcrumb-item font-weight-light">Set Sale Limit for Cards</li>
    </ul>
    <form method="post" data-ajax="true" data-ajax-controller="Cards" data-ajax-action="AcDcCardSearch" data-ajax-method="POST" data-ajax-success="OnSuccessSetLimit" data-ajax-failure="OnFailure">
        <div class="tab-content mt-3" id="myTabContent">
            <div class="tab-pane fade show active" id="basicInfo" role="tabpanel" aria-labelledby="basicInfo-tab">
                <div class="border-1 rounded border-grey h-100">
                    <p class="text_primary px-3 py-2 bg-grey m-0 font-weight-bold">Set Sale Limit for Cards</p>
                    <div class="p-2 p-md-4">
                        <div class="w-100">

                            <div id="successUpdate" class="mb-3 text-center" style="background-color: #a0f1d6;display:none;"></div>

                            <fieldset class="border-1 rounded border-grey pb-3">
                                <legend class="font-12 font-weight-bold d-inline-block w-auto ml-3 mb-0 px-2">Search Cards</legend>
                                <div class="d-flex align-items-center justify-content-between flex-wrap pt-3 ">
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal col-md-4 col-12 mb-0">Customer ID<sup class="text-danger">*</sup></label>
                                            <div class="col-md-7 col-12">
                                                @Html.TextBoxFor(m => m.CustomerId, new { @id = "CustomerDefaultVal", @class = "form-control restrictPaste", onkeypress = "return isNumberKey(event)" })
                                                @Html.ValidationMessageFor(m => m.CustomerId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal col-md-4 col-12 mb-0 offset-md-1">Card Number</label>
                                            <div class="col-md-7 col-12">
                                                @Html.TextBoxFor(m => m.CardNo, new { @class = "form-control restrictPaste", onkeypress = "return isNumberKey(event)" })
                                                @Html.ValidationMessageFor(m => m.CardNo, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal col-md-4 col-12 mb-0">Mobile Number</label>
                                            <div class="col-md-7 col-12">
                                                @Html.TextBoxFor(m => m.MobileNo, new { @class = "form-control restrictPaste", onkeypress = "return isNumberKey(event)" })
                                                @Html.ValidationMessageFor(m => m.MobileNo, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-12">
                                        <div class="form-group d-flex align-items-center flex-wrap">
                                            <label class="font-weight-normal col-md-4 col-12 mb-0 offset-md-1">Card Status</label>
                                            <div class="col-md-7 col-12">
                                                @Html.DropDownListFor(m => m.Statusflag, Enumerable.Empty<SelectListItem>(), new { @class = "form-control statusVal" })
                                                @Html.ValidationMessageFor(m => m.Statusflag, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                </div>

                                <div class="clearfix"></div>

                                <div class="d-flex align-items-center justify-content-center flex-wrap mt-3 px-4">
                                    <div class="px-2 mb-3 col-sm-auto col-12 mb-sm-0 mb-2">
                                        <button class="btn btn_primary" type="submit" id="btnSave" name="submit">SEARCH</button>
                                    </div>
                                    <div class="px-2 mb-3 col-sm-auto col-12 mb-sm-0 mb-2">
                                        <a class="btn btn_primary" href="#" id="btnCancel" name="cancel" onclick="resetClick()">RESET</a>
                                    </div>
                                    <div class="px-2 mb-3 col-sm-auto col-12 mb-sm-0 mb-2">
                                        <a class="btn btn_primary" href="#" id="btnCancel" name="cancel" onclick="exportReportToExcel()">UPLOAD EXCEL</a>
                                    </div>
                                </div>
                            </fieldset>

                        </div>

                        <div class="clearfix"></div>

                        <div id="noRecord" class="mb-3 text-center" style="background-color: #fee4e4;display:none;margin-top:1%"></div>

                        <div id="UpdateGrid" style="display:none;margin-top:1%">
                            <div class="table-responsive">
                                <table id="CardSearchSaleLimit" class="datatable table table-striped d-block table-bordered table-responsive nowrap mt-3" style="width:100%;">
                                    <thead>
                                        <tr> 
                                            <th>S.No</th>
                                            <th>
                                                Select
                                            </th>
                                            <th>
                                                Card Number
                                            </th>
                                            <th>
                                                Vehicle No/User Name
                                            </th>
                                            <th>
                                                Mobile Number
                                            </th>
                                            <th>
                                                Status
                                            </th>
                                            <th>
                                                Issue Date
                                            </th>
                                            <th>
                                                Expiry Date
                                            </th>
                                            <th>
                                                Cash Purse Limit
                                            </th>
                                            <th>
                                                Sale Txn Limit
                                            </th>
                                            <th>
                                                Daily Sale Limit
                                            </th>
                                            <th>
                                                Monthly Sale Limit
                                            </th>

                                        </tr>
                                    </thead>
                                </table>
                            </div>
                            <div class="d-flex align-items-center justify-content-center mt-md-3 flex-wrap px-4 mb-3">
                                <div class="px-2 mb-3 col-sm-auto col-12 mb-sm-0 mb-2">
                                    <button class="btn btn_primary" type="button" id="btnSave" name="submit" onclick="updateCards()">UPDATE</button>
                                </div>
                            </div>

                            <div class="clearfix"></div>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@using Microsoft.AspNetCore.Http;
<script src="https://rawgit.com/moment/moment/2.2.1/min/moment.min.js"></script>

@*<script src="https://cdn.jsdelivr.net/gh/linways/table-to-excel@v1.0.4/dist/tableToExcel.js"></script>
*@
<script>

      $('.restrictPaste').on('paste', function (event) {
        if (event.originalEvent.clipboardData.getData('Text').match(/[^\d]/)) {
            event.preventDefault();
        }
    });

    $(document).ready(function () {

        function isNumberKey(evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode;
            if (charCode != 46 && charCode > 31
                && (charCode < 48 || charCode > 57))
                return false;

            return true;
        }

        $('select').SumoSelect({
            placeholder: '-Select-',
            search: true,
            searchText: 'Enter Text here.'
        });

        $.ajax({
            type: 'POST',  // http method
            url: '@Url.Action("GetStatusType", "Common")',
            data: { status: "SaleLimit" },
            dataType: "json",
            success: function (data, status, xhr) {

                console.log(data);

                $.each(data.statusTypeList, function (i, option) {
                    $("<option/>").val(option.statusId).text(option.statusName).appendTo(".statusVal");
                });
                $(".statusVal")[0].sumo.reload();
            },
            error: function (jqXhr, textStatus, errorMessage) {
                alert("Error Populating Status Type");
            }
        });


        var loginType = '@Context.Session.GetString("LoginType")';

        if (loginType == "Customer") {

            $.ajax({
                url: "@Url.Action("SetSaleLimit", "Cards")",
                type: "POST",
                dataType: "JSON",
                success: function (data) {

                    OnSuccessSetLimit(data);

                    $("#CustomerDefaultVal").val('@Context.Session.GetString("UserId")');
                    $("#CustomerDefaultVal").attr("readonly", true);

                    document.getElementById('UpdateGrid').style.display = 'block';

                },
                error: function (ex) {
                    alert('Failed' + ex);
                }
            });
        }
    });

    function resetClick() {
        window.location.reload(true);
    }

    function OnSuccessSetLimit(res) {
        console.log(res, "data");

        if (res.searchList.success == true) {

            document.getElementById("noRecord").style.display = "none";
            document.getElementById("successUpdate").style.display = "none";

            var searchGrid = res.searchList.data;

            $('#CardSearchSaleLimit').DataTable().clear().destroy();

            var tbl = $('#CardSearchSaleLimit').DataTable({
                paging: true,
                searching: false,
                stateSave: true,
                "lengthMenu": [5, 10, 20, 50, 100, 200, 500, 1000, 2000],
                "autoWidth": false,
                "oLanguage": {
                    "sLengthMenu": "Display _MENU_ Records",
                    "info": "Showing _START_ to _END_ of _TOTAL_ Records",
                }
            });

            for (var i = 0; i < searchGrid.length; i++) {

                var isDts;
                var expDts;

                if(((searchGrid[i].issueDate) == "01/01/0001 00:00:00") || ((searchGrid[i].issueDate) == "01/01/1900 00:00:00") || ((searchGrid[i].issueDate) == null)){
                    isDts = "";
                }else{
                    isDts = moment(searchGrid[i].issueDate, 'DD-MM-YYYY').format('DD-MM-YYYY');
                }

                if(((searchGrid[i].expiryDate) == "01/01/0001 00:00:00") || ((searchGrid[i].expiryDate) == "01/01/1900 00:00:00") || ((searchGrid[i].expiryDate) == null)){
                    expDts = "";
                }else{
                    expDts = moment(searchGrid[i].expiryDate, 'DD-MM-YYYY').format('DD-MM-YYYY');
                }

                var srNumber = (searchGrid[i].srNumber || '');
                var pressCheck = "<input type='checkbox' class='checkEnable' name='enableRow'>";
                var cardNumber = "<span class='getCard'>" + (searchGrid[i].cardNumber || '') + "</span>";
                var vechileNo = (searchGrid[i].vechileNo || '');
                var mobileNumber = (searchGrid[i].mobileNumber || '');
                var status = (searchGrid[i].status || '');
                var issueDate = isDts;
                var expiryDate = expDts;
                var cashPurseLimit = "<div style='width:160px;'><input class='form-control cgl cpl' onkeypress='return isNumberKey(event)' id='cashpurselimitid_"+i+"' name='" + (searchGrid[i].cashPurseLimit || '') + "' type='text' value='" + (searchGrid[i].cashPurseLimit || '') + "' readonly='readonly'></div>";
                var saleTxnLimit = "<div style='width:160px;display:flex;'><input maxlength='10' onkeypress='return isNumberKey(event)' class='form-control cgl stl' id='saletxnlimitid_"+i+"' onchange='saletxnlimitChange(this," + (i) + ")' name='" + (searchGrid[i].saleTxnLimit || '') + "' type='text' value='" + (searchGrid[i].saleTxnLimit || '') + "' readonly='readonly'><i style='display:none;margin-top:10px;' class='fa fa-exclamation-triangle errs' id='saletxn_error_"+i+"' aria-hidden='true'></i></div>";
                var dailySaleLimit = "<div style='width:160px;display:flex;'><input maxlength='14' onkeypress='return isNumberKey(event)' class='form-control cgl dsl' onchange='dailySalelimitChange(this," + (i) + ")' name='" + (searchGrid[i].dailySaleLimit || '') + "' type='text' value='" + (searchGrid[i].dailySaleLimit || '') + "' readonly='readonly'><i style='display:none;margin-top:10px;' class='fa fa-exclamation-triangle errss' id='dailysale_error_"+i+"' aria-hidden='true'></i></div>";
                var monthlySaleLimit = "<div style='width:160px;display:flex;'><input maxlength='14' onkeypress='return isNumberKey(event)' class='form-control cgl msl' id='monthlySalelimitid_"+i+"' onchange='monthlySalelimitChange(this," + (i) + ")' name='" + (searchGrid[i].monthlySaleLimit || '') + "' type='text' value='" + (searchGrid[i].monthlySaleLimit || '') + "' readonly='readonly'><i style='display:none;margin-top:10px;' class='fa fa-exclamation-triangle errsss' id='monthlysale_error_"+i+"' aria-hidden='true'></i></div>";

                tbl.row.add([
                    srNumber,
                    pressCheck,
                    cardNumber,
                    vechileNo,
                    mobileNumber,
                    status,
                    issueDate,
                    expiryDate,
                    cashPurseLimit,
                    saleTxnLimit,
                    dailySaleLimit,
                    monthlySaleLimit
                ]).draw();
            }

            document.getElementById("UpdateGrid").style.display = "grid";
        } else {
            document.getElementById("successUpdate").style.display = "none";
            document.getElementById("UpdateGrid").style.display = "none";
            $("#noRecord").html("");
            $("#noRecord").append("<span>" + res.searchList.message + "</span>");
            document.getElementById("noRecord").style.display = "block";
        }
    }

    var cardNo;
    var cashPurse;
    var saleTxn;
    var dailySale;
    var monthlySale;
    var currentRow;

    $("#CardSearchSaleLimit").on('click', '.checkEnable', function (e) {

        currentRow = $(this).closest("tr");

        if ($(this).is(':checked')) {

            currentRow.find('.cpl').attr("readonly", true);

            currentRow.find('.stl').attr("readonly", false);
            currentRow.find('.dsl').attr("readonly", false);
            currentRow.find('.msl').attr("readonly", false);

            cardNo = currentRow.find('.getCard').text();
        }
        if (!$(this).is(':checked')) {
            currentRow.find('.stl').attr("readonly", true);
            currentRow.find('.dsl').attr("readonly", true);
            currentRow.find('.msl').attr("readonly", true);
            currentRow.find('.cpl').attr("readonly", true);
            currentRow.find('.errs').css("display", "none");
            currentRow.find('.errss').css("display", "none");
            currentRow.find('.errsss').css("display", "none");
        }
    });

    $("#CardSearchSaleLimit").on('paste', '.cgl', function (event) {
        if (event.originalEvent.clipboardData.getData('Text').match(/[^\d]/)) {
            event.preventDefault();
        }
    });

    function OnFailure(data) {
        alert('Issue with data');
    }

    function updateCards() {
        document.getElementById("successUpdate").style.display = "none";
        var updateArray = new Array();

        
        var flag = "Y";
        var cnt = 0;
        $("#CardSearchSaleLimit input[type=checkbox]:checked").each(function () {

            var selectedRow = $(this).closest("tr")[0];
            console.log("index",selectedRow.rowIndex);
            
            var indexS = (selectedRow.rowIndex) - 1;

            console.log("indexS",indexS);

            var row = $(this).closest("tr");

            cardNo = row.find('.getCard').text();
            cashPurse = row.find('.cpl').val();
            saleTxn = row.find('.stl').val();
            dailySale = row.find('.dsl').val();
            monthlySale = row.find('.msl').val();

            updateArray.push({
                cardNo: cardNo,
                cashPurse: cashPurse,
                saleTxn: saleTxn,
                dailySale: dailySale,
                monthlySale: monthlySale
            });

            var cashPurseLimitVal = $('#cashpurselimitid_'+indexS).val();
            var saleTxnLimitVal = $('#saletxnlimitid_'+indexS).val();
            var monthlySaleLimitVal = $('#monthlySalelimitid_'+indexS).val();

            var totalSaleTxnLimitVal = (+saleTxnLimitVal) + 1;
            var totalMonthlySaleLimitVal = (+monthlySaleLimitVal) + 1;

            if(saleTxn.trim() == ''){
                document.getElementById('saletxn_error_'+indexS).title="Sale Txn limit should be less than or equal to Cash Purse Limit and also less than equal to 100,000";
                document.getElementById('saletxn_error_'+indexS).style.display = "block";
                flag = "N";
            }
            else{
             if(saleTxn.trim()!=''){
                if (!saleTxn.match(number)){
                    document.getElementById('saletxn_error_'+indexS).title="Sale Txn limit should be less than or equal to Cash Purse Limit and also less than equal to 100,000";
                    document.getElementById('saletxn_error_'+indexS).style.display = "block";
                    flag = "N";
                }
                else if(saleTxn == 0){
                    document.getElementById('saletxn_error_'+indexS).title="Sale Txn limit should be less than or equal to Cash Purse Limit and also less than equal to 100,000";
                    document.getElementById('saletxn_error_'+indexS).style.display = "block";
                    flag = "N";
                }
                else if(!(saleTxn < 100001)){
                    document.getElementById('saletxn_error_'+indexS).title="Sale Txn limit should be less than or equal to Cash Purse Limit and also less than equal to 100,000";
                    document.getElementById('saletxn_error_'+indexS).style.display = "block";
                    flag = "N";
                }
              }
            } 
            
            if(dailySale.trim()==''){
                document.getElementById('dailysale_error_'+indexS).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limitsss";
                document.getElementById('dailysale_error_'+indexS).style.display = "block";
                flag = "N";
            }
            else{
                 if(dailySale.trim()!=''){
                    if (!dailySale.match(number)){
                        document.getElementById('dailysale_error_'+indexS).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limit";
                        document.getElementById('dailysale_error_'+indexS).style.display = "block";
                        flag = "N";
                    }
                    else if(dailySale == 0){
                        document.getElementById('dailysale_error_'+indexS).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limit";
                        document.getElementById('dailysale_error_'+indexS).style.display = "block";
                        flag = "N";
                    }
                    else if(!(dailySale > totalSaleTxnLimitVal)){
                        document.getElementById('dailysale_error_'+indexS).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limit";
                        document.getElementById('dailysale_error_'+indexS).style.display = "block";
                        flag = "N";
                    }
                    else if(!(dailySale < totalMonthlySaleLimitVal)){
                        document.getElementById('dailysale_error_'+indexS).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limit";
                        document.getElementById('dailysale_error_'+indexS).style.display = "block";
                         flag = "N";
                    }
                 }
            }


             if(monthlySale.trim()==''){
                document.getElementById('monthlysale_error_'+indexS).title="MonthlySaleLimit can not be greater than 10,000,000.";
                document.getElementById('monthlysale_error_'+indexS).style.display = "block";
                flag = "N";
            }
            else{
                 if(monthlySale.trim()!=''){
                    if (!monthlySale.match(number)){
                        document.getElementById('monthlysale_error_'+indexS).title="MonthlySaleLimit can not be greater than 10,000,000.";
                        document.getElementById('monthlysale_error_'+indexS).style.display = "block";
                        flag = "N";
                    }
                    else if(monthlySale == 0){
                        document.getElementById('monthlysale_error_'+indexS).title="MonthlySaleLimit can not be greater than 10,000,000.";
                        document.getElementById('monthlysale_error_'+indexS).style.display = "block";
                        flag = "N";
                    }
                    else if(!(monthlySale < 10000001)){
                        document.getElementById('monthlysale_error_'+indexS).title="MonthlySaleLimit can not be greater than 10,000,000.";
                        document.getElementById('monthlysale_error_'+indexS).style.display = "block";
                        flag = "N";
                    }
                }
            }
        });

         if (cardNo == undefined) {
                alert("Please select atleast one item to Set limits.");
                flag = "N";
         }
 
         if (flag == "N")
            e.preventDefault();

        if (flag == "Y") {
            $("#CardSearchSaleLimit input[type=checkbox]:checked").each(function () {
                var selectedRow = $(this).closest("tr")[0];
                console.log("index",selectedRow.rowIndex);
                var indexS = (selectedRow.rowIndex) - 1;
                document.getElementById('saletxn_error_'+indexS).style.display = "none";
                document.getElementById('dailysale_error_'+indexS).style.display = "none";
                document.getElementById('monthlysale_error_'+indexS).style.display = "none";
                $(this).closest("tr").find(".checkEnable").prop('checked',false);
                $(this).closest("tr").find('.stl').attr("readonly", true);
                $(this).closest("tr").find('.dsl').attr("readonly", true);
                $(this).closest("tr").find('.msl').attr("readonly", true);
                $(this).closest("tr").find('.cpl').attr("readonly", true);
            });

            $.ajax({
                url: "@Url.Action("UpdateCards", "Cards")",
                type: "POST",
                dataType: "JSON",
                data: { limitArray: updateArray},
                success: function (res) {

                    document.getElementById("noRecord").style.display = "none";
                    $("#successUpdate").html("");
                    $("#successUpdate").append("<span>" + res + "</span>");
                    document.getElementById("successUpdate").style.display = "block";
                },
                error: function (ex) {
                    alert('Failed' + ex);
                }
            });
        }
    }

    function saletxnlimitChange(o, rowSelected){
        var txnVal = o.value;
        var cashPurseLimitVal = $('#cashpurselimitid_'+rowSelected).val();
        console.log("cashpurselimitid_", cashPurseLimitVal);

        if(txnVal.trim()==''){
            document.getElementById('saletxn_error_'+rowSelected).title="Sale Txn limit should be less than or equal to Cash Purse Limit and also less than equal to 100,000";
            document.getElementById('saletxn_error_'+rowSelected).style.display = "block";
            return;
        }
        else{
            if(txnVal.trim()!=''){
                if (!txnVal.match(number)){
                    document.getElementById('saletxn_error_'+rowSelected).title="Sale Txn limit should be less than or equal to Cash Purse Limit and also less than equal to 100,000";
                    document.getElementById('saletxn_error_'+rowSelected).style.display = "block";
                    return false;
                }else if(txnVal == 0){
                    document.getElementById('saletxn_error_'+rowSelected).title="Sale Txn limit should be less than or equal to Cash Purse Limit and also less than equal to 100,000";
                    document.getElementById('saletxn_error_'+rowSelected).style.display = "block";
                    return false;
                }else if(!(txnVal < 100001)){
                    document.getElementById('saletxn_error_'+rowSelected).title="Sale Txn limit should be less than or equal to Cash Purse Limit and also less than equal to 100,000";
                    document.getElementById('saletxn_error_'+rowSelected).style.display = "block";
                    return false;
                }else{
                    document.getElementById('saletxn_error_'+rowSelected).title="";
                    document.getElementById('saletxn_error_'+rowSelected).style.display = "none";
                }
            }
        }
    }

    function dailySalelimitChange(o, rowSelected){
        var dailySaleVal = o.value;
        var saleTxnLimitVal = $('#saletxnlimitid_'+rowSelected).val();
        var monthlySaleLimitVal = $('#monthlySalelimitid_'+rowSelected).val();

        var totalSaleTxnLimitVal = (+saleTxnLimitVal) + 1;
        var totalMonthlySaleLimitVal = (+monthlySaleLimitVal) + 1;

        console.log("recent val   ", saleTxnLimitVal+"     "+monthlySaleLimitVal);

        if(dailySaleVal.trim()==''){
            document.getElementById('dailysale_error_'+rowSelected).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limit";
            document.getElementById('dailysale_error_'+rowSelected).style.display = "block";
            return;
        }
        else{
                if(dailySaleVal.trim()!='')
                {
                if (!dailySaleVal.match(number))
                {
                    document.getElementById('dailysale_error_'+rowSelected).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limit";
                    document.getElementById('dailysale_error_'+rowSelected).style.display = "block";
                    return false;
                }
                else if(dailySaleVal == 0){
                    document.getElementById('dailysale_error_'+rowSelected).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limit";
                    document.getElementById('dailysale_error_'+rowSelected).style.display = "block";
                    return false;
                }
                else if(!(dailySaleVal > totalSaleTxnLimitVal)){
                    document.getElementById('dailysale_error_'+rowSelected).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limit";
                    document.getElementById('dailysale_error_'+rowSelected).style.display = "block";
                    return false;
                }
                else if(!(dailySaleVal < totalMonthlySaleLimitVal)){
                    document.getElementById('dailysale_error_'+rowSelected).title="Daily Sale Limit should be greater than equal to Sale Txn Limit and less than equal to Monthly Sale limit";
                    document.getElementById('dailysale_error_'+rowSelected).style.display = "block";
                    return false;
                }
                else
                {
                    document.getElementById('dailysale_error_'+rowSelected).title="";
                    document.getElementById('dailysale_error_'+rowSelected).style.display = "none";
                }
            }
        }
    }

    function monthlySalelimitChange(o, rowSelected){
        var monthlySale = o.value;
        if(monthlySale.trim()==''){
            document.getElementById('monthlysale_error_'+rowSelected).title="MonthlySaleLimit can not be greater than 10,000,000.";
            document.getElementById('monthlysale_error_'+rowSelected).style.display = "block";
            return;
        }
        else{
                if(monthlySale.trim()!=''){
                if (!monthlySale.match(number)){
                    document.getElementById('monthlysale_error_'+rowSelected).title="MonthlySaleLimit can not be greater than 10,000,000.";
                    document.getElementById('monthlysale_error_'+rowSelected).style.display = "block";
                    return false;
                }
                else if(monthlySale == 0){
                    document.getElementById('monthlysale_error_'+rowSelected).title="MonthlySaleLimit can not be greater than 10,000,000.";
                    document.getElementById('monthlysale_error_'+rowSelected).style.display = "block";
                    return false;
                }
                else if(!(monthlySale < 10000001)){
                    document.getElementById('monthlysale_error_'+rowSelected).title="MonthlySaleLimit can not be greater than 10,000,000.";
                    document.getElementById('monthlysale_error_'+rowSelected).style.display = "block";
                    return false;
                }
                else
                {
                    document.getElementById('monthlysale_error_'+rowSelected).title="";
                    document.getElementById('monthlysale_error_'+rowSelected).style.display = "none";
                }
            }
        }
    }

    function exportReportToExcel() {

        // Variable to store the final csv data
        var csv_data = [];

        // Get each row data
        var rows = document.getElementsByTagName('tr');

        if (rows.length > 0) {

            for (var i = 0; i < rows.length; i++) {

                // Get each column data
                var cols = rows[i].querySelectorAll('td,th');

                // Stores each csv row data
                var csvrow = [];
                for (var j = 0; j < cols.length; j++) {

                    //cols[j] = cols[j].slice(1);
                    // Get the text data of each cell
                    // of a row and push it to csvrow
                    //csvrow.push(cols[j].innerHTML);
                    console.log("cols[j]", cols[j]);
                    const selectElem = cols[j].querySelector('input');
                    const cardSpan = cols[j].querySelector('span');

                    console.log("cardSpan       :",cardSpan);
                    //var sel = document.getElementsByClassName("cpl")[j].defaultValue;
                    //console.log("sel",sel);
                    if (selectElem) {
                        csvrow.push(selectElem.value);
                    }else if(cardSpan){
                        csvrow.push(cardSpan.innerText);
                    }else {
                        csvrow.push(cols[j].innerText);
                    }
                    
                }
                //console.log(i, csvrow);
                //console.log(csvrow);
                // Combine each column value with comma
                csv_data.push(csvrow.join(","));
            }

            // Combine each row data with new line character
            csv_data = csv_data.join('\n');

            // Call this function to download csv file
            downloadCSVFile(csv_data);
    }
}

    function downloadCSVFile(csv_data) {

        // Create CSV file object and feed
        // our csv_data into it
        CSVFile = new Blob([csv_data], {
            type: "text/csv",
            width: "900"
        });

        // Create to temporary link to initiate
        // download process
        var temp_link = document.createElement('a');

        // Download csv file
        temp_link.download = "SetSaleLimit.csv";
        var url = window.URL.createObjectURL(CSVFile);
        temp_link.href = url;

        // This link should not be displayed
        temp_link.style.display = "none";
        document.body.appendChild(temp_link);

        // Automatically click the link to
        // trigger download
        temp_link.click();
        document.body.removeChild(temp_link);
    }
</script>

<style>
    .cgl {
        width: 70%;
    }
</style>